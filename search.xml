<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Hexo搭建Github Pages&Coding Pages博客操作指南]]></title>
      <url>%2F2017%2F06%2FHexo%E6%90%AD%E5%BB%BAGithub-Pages%26Coding-Pages%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%2F</url>
      <content type="text"><![CDATA[凡事请先阅读官方教程。此处不包含官方教程所包含内容。 目录结构1234567891011.├── .deploy├── public├── scaffolds├── scripts├── source| ├── _drafts| └── _posts├── themes├── _config.yml└── package.json .deploy：执行hexo deploy命令部署到相关Pages 服务商上的内容目录 public：执行hexo generate命令，输出的静态网页内容目录 scaffolds：layout模板文件目录，其中的md文件可以添加编辑 scripts：扩展脚本目录，这里可以自定义一些javascript脚本 source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 _drafts：草稿文章 _posts：发布文章 themes：主题文件目录 _config.yml：全局配置文件，大多数的设置都在这里 package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 Hexo命令 Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。 全局设置在你博客目录下有一个文件名_config.yml，打开可以配置信息。 局部页面在你博客目录下 \themes\你使用的主题\_config.yml 写博客相关命令 1234567Hexo常用命令： hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #将.deploy目录部署到相关Pages 服务商 相关命令简写： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 同时也支持复合命令： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 有时候生成的网页会报错，生成的rss因为没有清除，一般情况下用已下命令，重新生成即可。 1$ hexo clean]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git日常报错]]></title>
      <url>%2F2017%2F05%2Fgit%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%2F</url>
      <content type="text"><![CDATA[git clone 报403错误由于某些原因项目由GitLab迁移至Coding托管，而本地需要重新部署，本地重新克隆远程仓库时出现了403错误： root@xxx: git clone https://git.coding.net/xxxxxxxx/xxxx.gitcloning ‘xxx’…remote: Coding.net Tips : [You have no permission to access this repo.]fatal: unable to access ‘https://git.coding.net/xxxxxxxx/xxxx.git/‘: The requested URL returned error: 403 经查阅是因为本地缓存了错误的密码(其实保存的是之前项目仓库的密码，现在克隆的仓库还没有声明账号和密码)。这种情况下其中一种解决办法就是克隆时将账号和密码也添加到~/.git-credentials： http://username:password@git.coding.net/xxxxxxxx/xxxx.git 如果是首次使用Coding配置项目，是需要在账号下填写密钥滴。如同GitHub或GitLab使用时的配置方法。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Framework7实现路由跳转]]></title>
      <url>%2F2017%2F05%2FFramework7%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%2F</url>
      <content type="text"><![CDATA[Framework7 是一个开源免费的框架可以用来开发混合移动应用（原生和HTML混合）或者开发 iOS &amp; Android 风格的WEB APP。 由于Framework7是通过ajax加载新页面，因此Framework7属于单页面编程用法。比如： 1&lt;a href=&quot;index.html&quot;&gt;Go to About page&lt;/a&gt; 当我们点击这个链接的时候，Framework7会通过Ajax获取 index.html，解析它的内容，然后把它实时插入到DOM中，并且做一个动画切换到这个新页面。因此在默认情况下页面路由是不会发生变化的，但是在个别特例时候我们需要路由变化实现页面跳转。 实现路由跳转的方式官方实例化方法有以下几种： ajaxLinks参数在初始化应用（英文）| 初始化应用（中文）时候传递不同的 ajaxLinks 参数。关于ajaxLinks参数的官方说明： 参数 类型 默认值 说明 router string undefined 指定哪些链接需要用ajax加载，默认情况下（当为undefined时）Framework7 会使用ajax加载所有的链接。你可以通过设置一个CSS选择器来指定需要通过Ajax加载的链接，比如 “a.ajax” - 只有class 为 “ajax” 的链接。 router参数同时也可以配置router参数实现自己的路由方式。关于router参数的官方说明： 参数 类型 默认值 说明 router boolean true 如果你有自己的路由实现，你可以禁用默认的路由 externalLinks参数为每个需要实现路由跳转的链接添加 external class类名，🌰：&lt;a href=&quot;index.html&quot; class=&quot;external&quot;&gt;。同时正确href值的链接（比如是空的或者是 #）也不会实现ajax加载新页面。当然后者在常见实际项目中是很少出现的。关于externalLinks参数的官方说明： 参数 类型 默认值 说明 externalLinks string ‘.external’ 不应该被 Framework7 管理的链接的CSS选择器。比如 “.external” 会匹配到这样的链接 &lt;a href=&quot;somepage.html&quot; class=&quot;external&quot;&gt; (因为它有 “external” 类) pushState参数关于pushState相关参数的官方说明： 参数 类型 默认值 说明 pushState boolean false 如果你开发web app（而不是通过PhoneGap封装的混合应用)，那么这个功能将很有用（浏览器的URL将会看上去像这样 &quot;http://my-webapp.com/#/about.html&quot;)。用户可以通过浏览器默认的前进后退按钮来操作。 pushStateSeparator string ‘#!/‘ push state 时候在URL中使用的分隔符，如果改成 “#page/“，那么你的url将会像这样 &quot;http://myapp.com/#page/about.html&quot; pushStateRoot string undefined Push state URL根路径, 比如 &quot;http://my-app.com/&quot;. 只有当你把 pushStateSeparator 设置为空(“”)时才有效。 pushStateNoAnimation boolean false 如果设置为 false，那么会继承当前 View 的 animatePages 参数。如果设置为 true，那么页面切换的时候将没有动画效果。 pushStatePreventOnLoad boolean true 如果开启，则应用程序加载时的第一个弹出状态事件会被忽略，因为它可能会阻止不必要的问题。 但是当你使用异步加载框架（如Require.js）初始化应用程序时，可以禁用它]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Coding Pages自定义域名捆绑跳转页面]]></title>
      <url>%2F2017%2F05%2FCoding%20Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E6%8D%86%E7%BB%91%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%2F</url>
      <content type="text"><![CDATA[Coding强制捆绑五秒跳转页面，影响的人群是Coding绑定自定义域名且拥有者为非付费的会员。跳转页面的出现频率为：1 次/自定义域名/Cookie/天，也就是说，在非隐身模式没有清理 Cookie 的情况下，访问同一个自定义域名，一天只会看到一次跳转页面。所捆绑页面为类似于腾讯公益404页面，一句名人名言附带作者图像。及此页面的相关说明。 Coding Pages等待跳转页面具体说明及删除方法 2017.06.02更新官方已经上线Hosted by Coding Pages，可通过在网站首页放置Coding官方标示进而停掉Coding pages的五秒跳转页面。 2017.06.05更新由于需要添加Hosted by Coding Pages而取消Coding pages的五秒跳转页面，故本站将在Coding pages审核后添加Hosted by Coding Pages &amp; GitHub Pages样字。 2017.06.14更新]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Zeplin新版介绍--已全面支持windows系统]]></title>
      <url>%2F2017%2F05%2FZeplin%E6%96%B0%E7%89%88%E4%BB%8B%E7%BB%8D--%E5%B7%B2%E5%85%A8%E9%9D%A2%E6%94%AF%E6%8C%81windows%E7%B3%BB%E7%BB%9F%2F</url>
      <content type="text"><![CDATA[背景Zeplin，由 Zeppelin 一词演变而来，是一款为设计师和前端开发者提供设计原稿交接与沟通的高效平台，可进行标注、注释，还提供了便利的团队协作功能。目前该软件已全面支持Sketch、Photoshop，最早只支持MAC平台使用，但在16年5月份已经更新了测试版本对windows系统的支持（官方文章）。不过分地说有了Zeplin，马克曼可以退出你的桌面了。(国内也有类似的软件—标你妹，有兴趣的可以研究一下)。 下载无论在任何平台运行，软件方面要求最低是photoshop cc2015版的。mac系统，插件下载地址 面板下载地址着重强调一下windows版本，插件方面可以在应用下载后点击顶部Help &gt; Install Photoshop Plugin板块下载Zeplin的photoshop插件。插件下载地址 面板下载地址 协作使用在项目内右侧点击Invite按钮，然后直接搜索需要添加的组员注册账号或者邮箱添加即可（组员添加后拥有除了踢人之外的所用权限）。 价格目前免费版仅支持创建一个使用中的项目，三个项目的话是每个月19刀（好像是涨价了）。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[技术点记录]]></title>
      <url>%2F2017%2F05%2F%E5%B0%8F%E6%8A%80%E5%B7%A7%E7%82%B9%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[单选框取值问题1$(&apos;.demo&apos;).is(&apos;:checked&apos;)与$(&apos;.demo:checked&apos;) $(&#39;.demo:checked&#39;)会获取到input显式定义checked || checked=&quot;checked&quot;的选项，$(&#39;.demo&#39;).is(&#39;:checked&#39;)获取的是真正点击选中的选项。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo日常报错维护]]></title>
      <url>%2F2017%2F04%2Fhexo%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%E7%BB%B4%E6%8A%A4%2F</url>
      <content type="text"><![CDATA[注：遇到报错应自行排查，或首先查看hexo官方问题解答板块内容（链接：hexo官方问题答疑）。 意外的标记异常（1）1.异常内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051INFO Deleted database.INFO Start processingFATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path) [Line 3, Column 198] unexpected token: &#125;&#125; at Object.exports.prettifyError (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/lib.js:34:15) at new_cls.render (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/environment.js:469:27) at new_cls.renderString (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/environment.js:327:21) at /Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/extend/tag.js:66:9 at Promise._execute (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/debuggability.js:300:9) at Promise._resolveFromExecutor (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:481:18) at new Promise (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:77:14) at Tag.render (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/extend/tag.js:64:10) at Object.tagFilter [as onRenderEnd] (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/hexo/post.js:253:16) at /Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/hexo/render.js:65:19 at tryCatcher (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/util.js:16:23) at Promise._settlePromiseFromHandler (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:510:31) at Promise._settlePromise (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:567:18) at Promise._settlePromise0 (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:612:10) at Promise._settlePromises (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:691:18) at Async._drainQueue (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:133:16) at Async._drainQueues (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:143:10) at Immediate.Async.drainQueues (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:17:14) at runCallback (timers.js:574:20) at tryOnImmediate (timers.js:554:5) at processImmediate [as _immediateCallback] (timers.js:533:5)FATAL (unknown path) [Line 3, Column 198] unexpected token: &#125;&#125;Template render error: (unknown path) [Line 3, Column 198] unexpected token: &#125;&#125; at Object.exports.prettifyError (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/lib.js:34:15) at new_cls.render (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/environment.js:469:27) at new_cls.renderString (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/environment.js:327:21) at /Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/extend/tag.js:66:9 at Promise._execute (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/debuggability.js:300:9) at Promise._resolveFromExecutor (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:481:18) at new Promise (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:77:14) at Tag.render (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/extend/tag.js:64:10) at Object.tagFilter [as onRenderEnd] (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/hexo/post.js:253:16) at /Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/hexo/render.js:65:19 at tryCatcher (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/util.js:16:23) at Promise._settlePromiseFromHandler (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:510:31) at Promise._settlePromise (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:567:18) at Promise._settlePromise0 (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:612:10) at Promise._settlePromises (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:691:18) at Async._drainQueue (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:133:16) at Async._drainQueues (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:143:10) at Immediate.Async.drainQueues (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:17:14) at runCallback (timers.js:574:20) at tryOnImmediate (timers.js:554:5) at processImmediate [as _immediateCallback] (timers.js:533:5) 2.原因 这种类型的报错一般都是Markdown文章中使用了大括号{ }这个特殊字符，且没有转义导致编译时冲突未通过。 3.解决方法 可以参考Markdown语法规范，将{ }大括号通过 &amp;#123; &amp;#125; 进行转码处理。 意外的标记异常（2）1.异常内容如下： 123456789101112131415161718fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peerFATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peer at ChildProcess.&lt;anonymous&gt; (/Users/a001/GitHub/qumuase.github.io/node_modules/.0.6.0@hexo-util/lib/spawn.js:37:17) at emitTwo (events.js:106:13) at ChildProcess.emit (events.js:191:7) at maybeClose (internal/child_process.js:877:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)FATAL fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peerError: fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peer at ChildProcess.&lt;anonymous&gt; (/Users/a001/GitHub/qumuase.github.io/node_modules/.0.6.0@hexo-util/lib/spawn.js:37:17) at emitTwo (events.js:106:13) at ChildProcess.emit (events.js:191:7) at maybeClose (internal/child_process.js:877:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5) 2.原因 这种类型的报错一般都是Markdown文章中使用了斜杠／这个特殊字符，且没有转义导致编译时冲突未通过。 3.解决方法 可以参考Markdown语法规范，将／斜杠(英文)通过 &amp;#47; ，或／斜杠（中文）通过&amp;#65295;进行转码处理。同时也可以将相关符号用代码（Markdown语法：``）包裹起来即可。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Laravel＋Vuejs实现Task增删改查功能（转）]]></title>
      <url>%2F2017%2F04%2FLaravel%EF%BC%8BVuejs%E5%AE%9E%E7%8E%B0Task%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8A%9F%E8%83%BD%EF%BC%88%E8%BD%AC%EF%BC%89%2F</url>
      <content type="text"><![CDATA[1.创建一条资源路由,如下图2.执行命令php artisan make:controller TaskController --resource，此时,在app/Http/Controllers目录下生成一个TaskController资源控制器，在index方法获取所有的tasks,如下图： 3.在app/resources/view/task目录下创建index.blade.php文件，如下：4.laravel实现的tasks列表功能效果，如下：5.简单的tasks列表展示完成，但是我们要用vuejs实现该功能,首先，直接加载vuejs压缩包，并实例化Vue(el:body表示整个body区域属于vuejs控制).6.把列表展示部分提取出来，放在template标签里面，如下：7.接下来要实现的就是如何用vuejs绑定数据到tempate模版，不废话，直接贴代码： 这里用vue的component组件，第一个模版替换自定义的tasks-app标签，(最好是这种形式,如果是tasks标签随着以后发展可能会加入新标签，避免与之冲突)，第二参数是一个json数据：template是指定哪个模板替换原有自定义标签，data就是数据，返回的是task空数据。我们绑定这个数据都模板，循环li标签这里用vue里的v-for,因为laravel的模板变量标签是&#123;&#123; &#125;&#125;与vuejs的语法冲突，所以在前面加&#123;&#123; &#125;&#125;前加@laravel就不会解析模板标签。 8.因为绑定data里面的tasks数据为空，所以页面展示效果就是没有内容的列表页，如下：9.接下来需要做，如何用vuejs从后台获取数据，绑定到tasks上面? 1直接用jquery库实现get请求获取tasks数据，同时绑定到data数据tasks上。 10.创建tasks的API路由，同时创建TaskApiControler资源控制器，如下：11.此时，tasks列表页的效果又回到我们最开始用laravel实现tasks列表效果相同。12.接下来实现用vuejs实现删除task，同时删除数据记录。不过在这之前加载vuejs的一个插件vue-resource，该插件用法见：vue-resource。在component组件里添加deleteTask方法同时绑定到删除按钮上该删除事件，代码如下： 注意：用vue-resource插件注册一个资源路由，跟laravel里面的资源路由用法差不多，绑定到删除按钮传递一个task一条记录到deleteTask方法，执行resource.delete方法到后台,实际对应后台的删除路由，后台删除控制器代码如下： 13.在视图里点击删除按钮，会实现删除功能同时删除数据库纪录，但这里报错(不要方！！！因为没有Laravel没有获取token值），加如下两行代码即可： 1删除数据库的记录vuejs同时执行$remove删除tasks 里面的该条记录 14.接下来实现添加task，在template增加一个form 表单，在vue的component组件添加createTask方法，并且在input用v-model绑定数据notes，同时在data初始化一个notes： 1创建Task成功，但是需要优化效果，这里简单优化两个地方，一个是创建成功现实在最前面，另一个是清空input框数据。具体修改代码如下： 注意：这里的orderBy是vuejs的排序，－1代表倒序。 15.最后的效果，如下：编辑功能如添加功能，稍作修改即可。整个功能实现完成！初学VueJs使用的不是很好，欢迎指正！(转) 注：本文章转自公众号：chengxuyuanbiji，本文转载已取得授权。另转载请注明出处，一切权益归原作者所有。扫描以下二维码关注 chengxuyuanbiji 公众号，掌握最新Laravel及相关前端扩展技术知识。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《深入浅出Node.js》笔记摘录（一）]]></title>
      <url>%2F2017%2F04%2F%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode.js%E3%80%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
      <content type="text"><![CDATA[模块的实现 区分为node自身提供的核心模块与用户编写的文件模块优先从缓存加载 路径分析 文件定位 编译执行文件拓展名分析require( )在分析标识符的过程中，会出现标识符中不包含文件拓展名的情况。node会按照.js、.json、.node的顺序补充拓展名，依次尝试。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[红薯育苗种植记录]]></title>
      <url>%2F2017%2F04%2F%E7%BA%A2%E8%96%AF%E7%A7%8D%E6%A4%8D%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[保持更新，直至收获或全部培育失败。 &gt; 2017.05.14 正苗种植（这个时间种算是较晚了） &gt; 2017.04.22 育苗入土 &gt; 2017.01.10 优质红薯育苗开始 由来： 年前得到了一些市面买不到(主要是对方不售卖)的优质红薯，不是很多，本着今年吃完明年还想继续吃得上的精神，萌发了育苗扦插种植的想法。 11月10号(5℃±)选择部分红薯切面入水育苗 14月22号(25℃±)培育好的苗二次培育 因为无过往经验，网上技术教程也众说纷坛，所以为了保证至少存活下来一棵苗，主要分为以下五种实施方案： 方法一：母体培育及后期种植室温下自然生长的母体带苗入营养土培育。04.30更新：迁移至五加仑大盆种植。 方法二：母体上的幼苗营养土培育及后期种植室温下自然生长的母体培育出来的嫩苗单独入营养土培育。04.30更新：05.01更新：迁移至三加仑大盆种植。 方法三：母体上的幼苗沙土培育及后期种植入水育苗的母体所培育出来的嫩苗单独入沙土培育。 方法四：母体上的幼苗入水培育及后期种植入水育苗的母体所培育出来的嫩苗单独入水二次培育。04.30更新：此方式育苗不生长，已放弃。 方法五：母体水中培育及后期种植入水育苗的母体继续保持培育。05.01更新：迁址至五加仑大盆种植。 正苗种植挖出所有土壤中的母体，掰掉长出的新苗，这才是下一代的希望。含带母体入土只会一直在母体的基础上一支生根，是不会结果的，所以需要的是母体在土中。部分育出的苗之前水育的带根母体各类盆里也随便种了几株，这些不抱什么希望。在盆里随便撒了点🌻，😄]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JSON数据的那点事]]></title>
      <url>%2F2017%2F04%2Fjson%E6%95%B0%E6%8D%AE%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B%2F</url>
      <content type="text"><![CDATA[1.基础JSON有两种结构，对象和数组。 JSON对象结构是以“{”大括号开始，以“}”大括号结束。中间部分由n个以“，”分隔的“key(键)/value(值)”对构成，关键字和值之间以“：”分隔，一般语法结构如下方代码所示(其中key是字符串，而value可以是字符串，数值，true，false，null，对象或数组)： 12345&#123; name: xiao ming, age: 18, ...&#125; JSON数组结构是以“[”开始，“]”结束，中间由n个以“，”分隔的值列表组成，一般语法结构如下方代码所示： 12345678910[ &#123; name: xiao ming, age: 18 &#125;, &#123; name: xiao hong, age: 21 &#125;] 2.操作 分为两种方式：“.”和“[key]”。 其中JSON对象与JSON数组可互相转换，譬如有下边一组JSON数据需要格式化： 1234567891011121314151617181920&#123; &quot;10&quot;: &#123; &quot;id&quot;: 7, &quot;sorts&quot;: 0, &quot;level&quot;: 1, &quot;goods&quot;: [] &#125;, &quot;11&quot;: &#123; &quot;id&quot;: 8, &quot;sorts&quot;: 0, &quot;level&quot;: 1, &quot;goods&quot;: [] &#125;, &quot;12&quot;: &#123; &quot;id&quot;: 10, &quot;sorts&quot;: 0, &quot;level&quot;: 2, &quot;goods&quot;: [] &#125;&#125; 首先尝试遍历展示对应数据的时候json.parse()后直接获取JSON对象的length，返回的结果肯定是undefined了。 遍历后json[i]获取到i的值是对应当前数据的key值，而期望得到的是以0为下标开始的数据格式(类似于JSON数组的下标表示方式)。 网上的方法如下图for in的循环方式，处理结果只能得到数据的总长度，解决了最开始直接获取length输出undefined的问题，数据结构依然不是期望结果。 12345678910111213function getjson(json)&#123; var jsonLength = 0; for(var item in json)&#123; jsonLength++; &#125; return jsonLength;&#125; 最终，通过Object.keys与.map()方法组合将JSON对象转化为JSON数组。转化代码如下： 1234json = JSON.parse(json);json = Object.keys(json).map(function(k)&#123; return json[k];&#125;); 根据数据情况需先将字符串转化为对象 Object.keys(json)返回参数json可被遍历的属性 .map()返回json遍历后JSON数组。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F04%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome !]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[sublime text 头部自动化注释（DocBlockr）]]></title>
      <url>%2F2016%2F04%2Fsublime%20text%20%E5%A4%B4%E9%83%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B3%A8%E9%87%8A%EF%BC%88DocBlockr%EF%BC%89%2F</url>
      <content type="text"><![CDATA[通过sublime text下package control 的 Install Package安装DocBlockr插件。 打开Preferences -&gt; Package Settings -&gt; DocBlockr-&gt;Settings - User 配置文件,也可以直接将新修改的配置信息保存到”Default Settins”。(“Default Settins”是默认配置文件，需要管理员权限才能修改。一般情况下不推荐直接修改系统默认配置文件)。 将下面的代码根据需求保存到User配置文件中并保存文件，再次触发DocBlockr即可看到效果。 123456789101112131415161718&#123; &quot;jsdocs_param_name&quot;: false, &quot;jsdocs_param_description&quot;: false, &quot;jsdocs_return_description&quot;: [], &quot;jsdocs_return_tag&quot;: false, &quot;jsdocs_extra_tags_go_after&quot;: [], &quot;jsdocs_align_tags&quot;: [], &quot;jsdocs_extra_tags&quot;: [ &quot;&quot;, &quot;@DateTime &#123;&#123;datetime&#125;&#125;&quot;, &quot;&quot;, &quot;@author ***&quot;, &quot;&quot;, &quot;保持优雅的代码注释&quot;, &quot;maintain the elegant code comments&quot;, &quot;@version $&#123;1:[version]&#125;&quot;, ]&#125; 更多自定义配置可参考官方文档（https://github.com/spadgos/sublime-jsdocs）。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python3-3.5.1 already installed, it's just not linked]]></title>
      <url>%2F2016%2F04%2Fpython3-3.5.1%20already%20installed%2C%20it's%20just%20not%20linked%2F</url>
      <content type="text"><![CDATA[mac安装python3版本之后无法启动，运行下面一下代码即可： 1sudo ln -s /Library/Frameworks/Python.framework/Versions/3.4/bin/python3 /usr/local/bin/python3]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[wordpress权限及后台FTP登录失败问题解决方法]]></title>
      <url>%2F2016%2F02%2Fwordpress%E6%9D%83%E9%99%90%E5%8F%8A%E5%90%8E%E5%8F%B0FTP%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[在后台模板进行模板编辑无保存按钮，提示当前为只读权限。个人解决方法就是修改整个文件夹的权限，使当前用户及组拥有Write和eXecute权限。 在wordpress后台版本更新或者安装插件时提示输入FTP账户信息，出现这个问题的原因是Apache/Nginx的执行身份是非文件归属身份。解决方法为编辑wordpress项目根目录下的配置文件(wp-config.php),在最后一行加上以下一行代码: 123define(&quot;FS_METHOD&quot;, &quot;direct&quot;);define(&quot;FS_CHMOD_DIR&quot;, 0777);define(&quot;FS_CHMOD_FILE&quot;, 0777); 抑或是遇到所有权限问题最简单粗暴直接的方法就是给整个网站目录添加权限： 1sudo chmod -R 777 yourfolder/ 当然，严格意义上讲这样是不安全的。]]></content>
    </entry>

    
  
  
</search>
