<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[MAC Chrome 插件安装目录]]></title>
      <url>%2F2018%2F06%2FMAC%20Chrome%20%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%2F</url>
      <content type="text"><![CDATA[MAC Chrome 插件安装目录: 1~/Library/Application\ Support/Google/Chrome/Default/Extensions]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[npm拉取资源镜像替换]]></title>
      <url>%2F2018%2F06%2Fnpm%E6%8B%89%E5%8F%96%E8%B5%84%E6%BA%90%E9%95%9C%E5%83%8F%E6%9B%BF%E6%8D%A2%2F</url>
      <content type="text"><![CDATA[1$ npm config set registry https://registry.npm.taobao.org 配置后可通过下面方式来验证是否成功 12$ npm config get registry或 npm info express]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2018最新版搭建Shadowsocks方法]]></title>
      <url>%2F2018%2F05%2F2018%E6%9C%80%E6%96%B0%E7%89%88%E6%90%AD%E5%BB%BAShadowsocks%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[过往安装方式可点击自行搭建Shadowsocks服务查看。里面的节点配置可以参考，本文将不进行具体的配置说明。 安装123456//centOS使用yum安装，unbuntu请使用apt-get安装拓展yum install epel-releaseyum updateyum install git python-setuptools libsodiumeasy_install pip==9.0.3pip install git+https://github.com/shadowsocks/shadowsocks.git@master 配置12345678910vi /etc/shadowsocks.json添加&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:8388, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;yourpassword&quot;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-gcm&quot;&#125; 服务启动123456//启动：ssserver -c /etc/shadowsocks.json -d start //停止：ssserver -c /etc/shadowsocks.json -d stop //重启：ssserver -c /etc/shadowsocks.json -d restart 设置开机自启动123vi /etc/rc.local添加sudo ssserver -c /etc/shadowsocks.json -d start 另：还有一种方式是不需要手动ssserver -c /etc/shadowsocks.json -d start执行，而是多一步安装supervisor： 12//centOS使用yum安装，unbuntu请使用apt-get安装拓展yum install supervisor 123456789vi /etc/supervisord.conf添加[program:shadowsocks]command=ssserver -c /etc/shadowsocks.jsonautostart=trueautorestart=trueuser=rootlog_stderr=truelogfile=/var/log/shadowsocks.log 重启服务器即可。 修改/etc/supervisord.conf文件时，默认文件是有很多原始内容的，但是我的一直为空所以此方式未实测成功。初步排查是由于语言环境设置的问题，可输入locale查看具体问题，具体解决方法请自行实践。错误如下： 12Failed to set locale, defaulting to CLoaded plugins: fastestmirror 错误排查：1.执行service supervisord start，如果没有报错，节点也可以连接了，那么问题是出在vi /etc/rc.local，请重新检查该文件配置；如果依然无法连接，请继续往下看。 2.执行ssserver -c /etc/shadowsocks.json，如果没有报错，节点也可以正常连接，那么问题是出在vi /etc/supervisord.conf，请重新检查该文件配置；如果依然无法连接，请继续往下看。 3.经过以上两步排查依然无法连接，那么问题很大可能就是出在vi /etc/shadowsocks.json，请重新检查该文件配置。 4.如果以上三个文件的配置问题都解决后，执行reboot命令重启服务器后依然无法连接，那么说明是最开始的依赖安装出了问题。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vue-cli+webpack打包后引用js及css的路径错误、背景图片的引用路径问题及favcion.ico默认不打包问题汇总]]></title>
      <url>%2F2018%2F05%2Fvue-cli%2Bwebpack%E6%89%93%E5%8C%85%E5%90%8E%E5%BC%95%E7%94%A8js%E5%8F%8Acss%E7%9A%84%E8%B7%AF%E5%BE%84%E9%94%99%E8%AF%AF%E3%80%81%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%95%E7%94%A8%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E5%8F%8Afavcion.ico%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%89%93%E5%8C%85%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%2F</url>
      <content type="text"><![CDATA[打包后引用js及css文件路径错误默认情况下，通过vuecli+webpack打包的css、js等资源，路径都是绝对的。当部署到牵涉路径的项目中时，绝对路径的引用就会出现问题。因为默认是把配置的static文件夹当作了根路径，因需要修改引用为相对路径。 方法一： build &gt; webpack.prod.conf.js文件的 output 对象中增加一行 1publicPath: &apos;./&apos;, 方法二：修改config &gt; index.js文件build对象的assetsPublicPath属性 1assetsPublicPath: &apos;./&apos;, css中背景图片的路径引用问题css中引用的背景图片是通过css加载的，如 background: url(“./assets/img/logo.png”);被相对打包后变成了url(static/css/static/img/logo.505c344.png)，因此我们要保留css引用图片的正常路径，达到这样的效果： 1url(../../static/img/logo.505c344.png) 1、查找build &gt; utils.js文件中的以下代码位置： 12345678if (options.extract) &#123; return ExtractTextPlugin.extract(&#123; use: loaders, fallback: &apos;vue-style-loader&apos; &#125;) &#125; else &#123; return [&apos;vue-style-loader&apos;].concat(loaders) &#125; 2、在 fallback 下添加一行： 12//上一行的别忘了逗号publicPath: &apos;../../&apos; 3、最终如此： 123456789if (options.extract) &#123; return ExtractTextPlugin.extract(&#123; use: loaders, fallback: &apos;vue-style-loader&apos;, publicPath: &apos;../../&apos; &#125;)&#125; else &#123; return [&apos;vue-style-loader&apos;].concat(loaders)&#125; 然后重新打包项目即可。 favcion.ico默认不打包问题在build &gt; webpack.prod.conf.js文件内查找new CopyWebpackPlugin，添加以下内容： 12345//路径根据自己实际情况&#123; from: &apos;./src/assets/img/favicon.ico&apos;, to: config.build.assetsRoot&#125; 最终如此： 123456789101112new CopyWebpackPlugin([ &#123; from: path.resolve(__dirname, &apos;../static&apos;), to: config.build.assetsSubDirectory, ignore: [&apos;.*&apos;] &#125;, &#123; from: &apos;./src/assets/img/favicon.ico&apos;, to: config.build.assetsRoot &#125;]) 然后配置根目录下.html文件，修改icon路径为： 1&lt;link rel=&quot;shortcut icon&quot; href=&quot;./favicon.ico&quot; /&gt; 最后打包后的favicon.ico是打包在根目录下与.html文件同级。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[快速测试百度对Github Pages静态网站的抓取及多部署解析]]></title>
      <url>%2F2018%2F05%2F%E5%BF%AB%E9%80%9F%E6%B5%8B%E8%AF%95%E7%99%BE%E5%BA%A6%E5%AF%B9Github%20Pages%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%9A%84%E6%8A%93%E5%8F%96%E5%8F%8A%E5%A4%9A%E9%83%A8%E7%BD%B2%E8%A7%A3%E6%9E%90%2F</url>
      <content type="text"><![CDATA[由于百度无法爬取Github Pages静态网站，所以在双重部署到 GitHub 及 Coding 之后，重新配置 DNS 解析线路后，可通过以下方式快速测试百度蜘蛛的 UA 能否访问网站，如果获取到了网站的内容且确定是当前页面内的内容，说明多部署解析成功了，网站可以被百度正常爬取了。（ 实测会存在能获取到代码，但是无当前页面body内具体内容的情况 ） 1curl -A &quot;Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)&quot; http://tmac.wang 注：国内通过Coding部署时要注意项目名称应为同用户名项目。即： 12&#123;username&#125;.coding.me， 这样稍后生成的 Pages 默认链接即为 &#123;username&#125;.coding.me。 相关参考：Hexo搭建Github Pages及Coding Pages博客操作指南Coding Pages自定义域名捆绑跳转页面]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vue2 + vue-video-player实现直播拉流HSL m3u8格式视频播放]]></title>
      <url>%2F2018%2F05%2Fvue2%20%2B%20vue-video-player%E5%AE%9E%E7%8E%B0%E7%9B%B4%E6%92%AD%E6%8B%89%E6%B5%81HSL%20m3u8%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%2F</url>
      <content type="text"><![CDATA[名词释义：直播推流、拉流简单来讲：拉流是从服务器获取视频，推流是将视频推送服务器。 推流：推流，指的是把采集阶段封包好的内容传输到服务器的过程。其实就是将现场的视频信号传到网络的过程。“推流”对网络要求比较高，如果网络不稳定，直播效果就会很差，观众观看直播时就会发生卡顿等现象，观看体验很是糟糕。推流主流推送协议分三种：RTMPRTMP是Adobe公司为Flash/AIR平台和服务器之间音、视频及数据传输开发的实时消息传送协议。多以flv格式封包。RTMP是目前最主流的流媒体传输协议，对CDN支持良好，实现难度较低，是大多数的直播平台的选择。 RTMP的不足——不支持浏览器，且Adobe已不再更新。直播服务要支持浏览器的话，需要另外的推送协议支持。 HLSHLS是由Apple公司定义的基于HTTP的流媒体实时传输协议。它的原理是将整个流分为多个小的文件来下载，每次只下载若干个。HLS是以点播的技术实现了直播的体验。因为每个小文件的时长很短，客户端可以很快地切换码率，以适应不同带宽条件下的播放。 分段推送的技术特点，决定了HLS的延迟一般会高于普通的流媒体直播协议。传输内容包括两部分：一是M3U8描述文件，二是TS媒体文件。WebRTCWebRTC是一个支持浏览器进行实时语音、视频对话的开源协议。WebRTC的支持者甚多，Google、Mozilla、Opera推动其成为W3C推荐标准。 拉流：拉流是指服务器已有直播内容，根据协议类型（如RTMP、RTP、RTSP、HTTP等），与服务器建立连接并接收数据，进行拉取的过程。拉流端的核心处理在播放器端的解码和渲染，在互动直播中还需集成聊天室、点赞和礼物系统等功能。 推流和拉流的区别？用户最终看到一条直播视频，可能会通过两种方式达成，一种是主动把内容传输到服务器，缓存在边缘节点，终端用户随时可以调取观看，这是推流；一种是当终端用户想要看某个内容时，将内容从源站调取，并缓存到边缘节点，这是拉流。 vue-video-player1234567891011//安装依赖npm install vue-video-player --save//播放HLS协议视频(*.m3u8)需要额外依赖npm install videojs-contrib-hls --save//样式&apos;video.js/dist/video-js.css&apos;需要依赖video.jsnpm install video.js --save//package.json内dependencies的video相关&quot;video.js&quot;: &quot;^6.8.0&quot;,&quot;videojs-contrib-hls&quot;: &quot;^5.14.1&quot;,&quot;vue-video-player&quot;: &quot;^5.0.2&quot;, 全局引用方式： 1234//main.jsimport VideoPlayer from &apos;vue-video-player&apos;import &apos;videojs-contrib-hls&apos;Vue.use(VideoPlayer) component内引用方式： 1234567891011//player.vueimport &apos;video.js/dist/video-js.css&apos;import &apos;vue-video-player/src/custom-theme.css&apos;import &#123; videoPlayer &#125; from &apos;vue-video-player&apos;import &apos;videojs-contrib-hls&apos;//componentscomponents: &#123; videoPlayer&#125; 123456789101112131415161718192021222324//template&lt;video-player class=&quot;video-player vjs-custom-skin&quot; :options=&quot;playerOptions&quot;&gt;&lt;/video-player&gt;//data playerOptions: &#123; controls: true, autoplay: true, //如果true,浏览器准备好时开始回放。 muted: false, // 默认情况下将会消除任何音频。 loop: false, // 导致视频一结束就重新开始。 preload: &apos;auto&apos;, // 建议浏览器在&lt;video&gt;加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持） language: &apos;zh-CN&apos;, playbackRates: [0.7, 1.0, 1.5, 2.0], aspectRatio: &apos;16:9&apos;, // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如&quot;16:9&quot;或&quot;4:3&quot;） sources: [&#123; type: &quot;application/x-mpegURL&quot;, src: &quot;http://playertest.longtailvideo.com/adaptive/bipbop/gear4/prog_index.m3u8&quot;, withCredentials: false &#125;], notSupportedMessage: &apos;此视频暂无法播放，请稍后再试！&apos;, //允许覆盖Video.js无法播放媒体源时显示的默认信息。 &#125; Tips:关于本地localhost视频可播放，编译后在服务器上报错的bug，vue-video-player上有issue提到，可点此查看。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Github无法记录Contributions]]></title>
      <url>%2F2018%2F05%2FGithub%E6%97%A0%E6%B3%95%E8%AE%B0%E5%BD%95Contributions%2F</url>
      <content type="text"><![CDATA[什么是Contributions？这一个个绿色小方块即为每一个的Contributions。 什么原因导致？换了新电脑。虽然也重新生成并添加了 ssh key，并且每次也都能正常 push 提交。但是逼格满满的 Contributions 却不会被绿色填充了。 如何解决？使用 git show 可查看目前push提交所用到的账户及邮箱，同时可对照 GitHub 内历史账户邮箱。也可通过 git config user.name 及 git config user.email 查看目前全局账户及邮箱号。目前邮箱与过往提交邮箱不一致时，会出现无法记录Contributions 的情况。 解决方法：一、粗暴解决法：删除.gitconfig配置文件，并重新生成。 12git config --global user.name &quot;name&quot;git config --global user.email &quot;your_email@youremail.com&quot; 二、理想添加法：在 GitHub 官方帮助中有提及：Why are my contributions not showing up on my profile?“您尚未将您的本地Git提交电子邮件添加到您的个人资料”，所以将目前本地使用的邮箱添加到 GitHub 设置下的邮箱列表即可。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vue proxyTable 端口代理问题]]></title>
      <url>%2F2018%2F05%2Fvue%20proxyTable%20%E7%AB%AF%E5%8F%A3%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[Error occured while trying to proxy 无法代理端口12//运行时前端页面报错Failed to load resource: the server responded with a status of 504 (Gateway Timeout) 12//npm run dev初始时2018-05-07 11:25 node[80587] (FSEvents.framework) FSEventStreamStart: ERROR: FSEvents_connect() =&gt; (ipc/send) invalid destination port (268435459) 12//iterm2 报错[HPM] Error occurred while trying to proxy request /api/info from localhost:8080 to http://******** (ECONNRESET) (https://nodejs.org/api/errors.html#errors_common_system_errors) 解决方法：第一种：修改config/index.js下host，由localhost修改为当前内网ip(192.168..)。且重新编译。第二种：重启iterm2。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[net::ERR_BLOCKED_BY_CLIENT报错处理]]></title>
      <url>%2F2018%2F04%2FERR_BLOCKED_BY_CLIENT%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86%2F</url>
      <content type="text"><![CDATA[报错：接口报错net::ERR_BLOCKED_BY_CLIENT 原由：板块为广告板块，浏览器安装了广告屏蔽插件。 解决：加入广告拦截白名单或者取消在项目网站内进行广告屏蔽。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Axios拦截器]]></title>
      <url>%2F2018%2F04%2FAxios%E6%8B%A6%E6%88%AA%E5%99%A8%2F</url>
      <content type="text"><![CDATA[请求拦截器12345678// 添加请求拦截器axios.interceptors.request.use(function (config) &#123; // 在发送请求之前做些什么 return config;&#125;, function (error) &#123; // 对请求错误做些什么 return Promise.reject(error);&#125;); 可添加对前置data的处理： 123456789axios.interceptors.request.use(function (config) &#123; if(config.method == &apos;post&apos;)&#123; config.data = qs.stringify(config.data) &#125; return config&#125;,function (error) &#123; // 对请求错误做些什么 return Promise.reject(error);&#125;); 响应拦截器12345678// 添加响应拦截器axios.interceptors.response.use(function (response) &#123; // 对响应数据做点什么 return response;&#125;, function (error) &#123; // 对响应错误做点什么 return Promise.reject(error);&#125;); 可添加对权限码的处理： 1234567891011121314axios.interceptors.response.use(function (response) &#123; switch (response.data.code) &#123; case 401: Message.error(&apos;暂无权限！&apos;) break; case 200: return response; break; default: break; &#125;&#125;, function (error) &#123; return Promise.reject(error);&#125;);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HTTP请求中Form Data与RequestPayload的区别]]></title>
      <url>%2F2018%2F04%2FHTTP%E8%AF%B7%E6%B1%82%E4%B8%ADForm%20Data%E4%B8%8ERequestPayload%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
      <content type="text"><![CDATA[定义方式的区别Form Data和RequestPayload是浏览器传输数据给接口的其中两种格式，浏览器是通过Content-Type来进行区分。如果是application/x-www-form-urlencoded，则为formdata方式，如果是application/json方式，则为payload方式。 data数据类型的区别RequestPayload 传输的data数据为json格式。Form Data传输的data数据是类似于form表单提交的路由拼接式数据格式。 类型转换方法axios post方法默认使用application/json格式，解决方案一是后端改变接收参数的方法，另外一种则是将axios post方法的编码格式修改为application/x-www-form-urlencoded。nodejs 可通过 body-parser 中间件处理： nodejs之body-parser中间件1const bodyParser=require(&quot;body-parser&quot;); 关于前端修改axios post请求的编码格式方法有多种，常见有以下两种： qs官方包链接地址：https://www.npmjs.com/package/qs通过qs.stringify(obj)即可转化编码格式。在axios中可通过前置请求拦截器统一配置：注：此配置方式只适用于post提交，其他请求方式需另行配置 12345678axios.interceptors.request.use(function (config) &#123; // 在发送请求之前做些什么 config.data = qs.stringify(config.data) return config; &#125;, function (error) &#123; // 对请求错误做些什么 return Promise.reject(error); &#125;); axios之transformRequest1234567891011121314151617181920this.$axios(&#123; method:&quot;post&quot;, url:&quot;/api/user&quot;, headers:&#123; &apos;Content-type&apos;: &apos;application/x-www-form-urlencoded&apos; &#125;, data:&#123; name:this.name, password:this.password &#125;, transformRequest: [function (data) &#123; let ret = &apos;&apos; for (let it in data) &#123; ret += encodeURIComponent(it) + &apos;=&apos; + encodeURIComponent(data[it]) + &apos;&amp;&apos; &#125; return ret &#125;],&#125;).then((res)=&gt;&#123; console.log(res.data);&#125;) 关键点在于 transformRequest，axios官方如此示意： 123transformRequest 允许在向服务器发送前，修改请求数据只能用在 &apos;PUT&apos;, &apos;POST&apos; 和 &apos;PATCH&apos; 这几个请求方法后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream 通过transformRequest处理后的data数据即可转化为所需要的格式。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[flutter 配置国内镜像]]></title>
      <url>%2F2018%2F03%2Fflutter%20%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%2F</url>
      <content type="text"><![CDATA[最近 flutter 官方针对国内下载依赖失败的问题，放出了国内的镜像地址Wiki地址 123456export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cngit clone -b dev https://github.com/flutter/flutter.gitexport PATH=&quot;$PWD/flutter/bin:$PATH&quot;cd ./flutterflutter doctor 上手试了试，速度刷刷快。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MAC 配置终端走代理翻墙]]></title>
      <url>%2F2018%2F02%2FMAC%20%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%E7%BF%BB%E5%A2%99%2F</url>
      <content type="text"><![CDATA[在终端中运行命令： 1export http_proxy=http://127.0.0.1:port 或者 1export ALL_PROXY=socks5://127.0.0.1:port Shadowsocks 可如下图方式查看并自动复制具体端口]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[flutter 配置开发环境]]></title>
      <url>%2F2018%2F02%2Fflutter%20%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
      <content type="text"><![CDATA[获取 Flutter SDK12//beta 版本git clone -b beta https://github.com/flutter/flutter.git 添加系统变量12345678910//添加临时系统变量 `pwd` 替换为刚才克隆的 flutter 的路径export PATH=`pwd`/bin:$PATH// 为保证在任意位置可执行 flutter 命令，应该添加永久系统变量vi $HOME/.bash_profile//添加以下内容 [PATH_TO_FLUTTER_GIT_DIRECTORY] 替换为刚才克隆的 flutter 的路径export PATH=[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin:$PATH//更新系统变量source $HOME/.bash_profile//可查看是否添加成功echo $PATH 安装依赖1flutter doctor 1234Downloading Dart SDK from Flutter engine 13cf22c284c24f81357aec6a89074a536efbf4d1... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- 0:01:14 --:--:-- 0 此步骤需要终端翻墙，否则可能会报错：curl: (7) Failed to connect to storage.googleapis.com port 443: Operation timed out 1234567891011121314151617181920212223 //过程较慢，耐心等待 ╔════════════════════════════════════════════════════════════════════════════╗ ║ Welcome to Flutter! - https://flutter.io ║ ║ ║ ║ The Flutter tool anonymously reports feature usage statistics and crash ║ ║ reports to Google in order to help Google contribute improvements to ║ ║ Flutter over time. ║ ║ ║ ║ Read about data we send with crash reports: ║ ║ https://github.com/flutter/flutter/wiki/Flutter-CLI-crash-reporting ║ ║ ║ ║ See Google&apos;s privacy policy: ║ ║ https://www.google.com/intl/en/policies/privacy/ ║ ║ ║ ║ Use &quot;flutter config --no-analytics&quot; to disable analytics and crash ║ ║ reporting. ║ ╚════════════════════════════════════════════════════════════════════════════╝Downloading Material fonts... 7.5sDownloading package sky_engine... 6.3sDownloading common tools... 14.9sDownloading darwin-x64 tools... 32.1s...]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[去往 weex 的路上 一步一个脚印 一步一个大坑]]></title>
      <url>%2F2018%2F02%2F%E5%8E%BB%E5%BE%80%20weex%20%E7%9A%84%E8%B7%AF%E4%B8%8A%20%E4%B8%80%E6%AD%A5%E4%B8%80%E4%B8%AA%E8%84%9A%E5%8D%B0%20%E4%B8%80%E6%AD%A5%E4%B8%80%E4%B8%AA%E5%A4%A7%E5%9D%91%2F</url>
      <content type="text"><![CDATA[weex debug 报错12345This command need to install weex-debugger. Installing...sh: ./src/scripts/check_reqs.js: Permission deniedfs.js:891 return binding.mkdir(pathModule._makeLong(path), ^ 尝试了 sudo 依然提示是无权限被拒绝。 各种尝试之后最后突然就通了也不知道是哪个环节打通的，记录一下子。 1234567891011121314//翻墙手动下载 Permissionsudo cnpm i puppeteer -g//重新全局安装 weex-devtoolsudo cnpm install weex-devtool -g//重新全局安装 weex-toolkitsudo cnpm install weex-toolkit -g//指定端口weex debug -p 8081//重试 weex debugweex debug 然后不知为何就好了😷]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[iTerm 记录]]></title>
      <url>%2F2018%2F02%2FiTerm%20%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[1234//添加国内镜像源vi ~/.npmrc//无需重启 iTerm 立即生效source ~/.npmrc 123456//修改环境变量vi ~/.bash_profile//无需重启 iTerm 立即生效source ~/.bash_profile//查看环境变量echo $ANDROID_HOME 12345678910//查看剪贴板历史command + shift + h//清除当前行ctrl + u//到行首ctrl + a//到行尾ctrl + e//查看历史命令command + ; 12//hexo 发布系列hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 1234//查看内地端口占用lsof -i :8083// kill 端口kill -9 8083 1234//指定端口react-native start --port 8083//指定版本react-native init MyApp --version 0.44.3 12// react-native run-android 时建立真机连接adb reverse tcp:8081 tcp:8081 12//自执行./gradlew assembleRelease 12345//替换镜像源yarn config set registry https://registry.npm.taobao.org --globalyarn config set disturl https://npm.taobao.org/dist --globalnpm config set registry https://registry.npm.taobao.orgnpm config set disturl https://npm.taobao.org/dist 123456//调起 wireshark 网络监视器wireshark//命令行执行 wireshark 网络监听w2 start//命令行终止 wireshark 网络监听w2 stop 12//列出所有依赖包的名称、当前版本、最新版本列表npm outdated 12//浏览器自动打开模块的代码仓库cnpm repo react 1234//java JDK 位置/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home//System/Library/Frameworks 12// nativefier 打包桌面应用nativefier --name &quot;appName&quot; --icon /Users/userName/Desktop/app/logo.icns &quot;http://tmac.wang/&quot; --single-instance]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nativefier 打包应用卡死解决方法]]></title>
      <url>%2F2018%2F02%2Fnativefier%20%E6%89%93%E5%8C%85%E5%BA%94%E7%94%A8%E5%8D%A1%E6%AD%BB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[1Downloading tmp-56791-0-electron-v1.7.9-darwin-x64 一直卡死在这个下载 electron 的过程中。 1vi ~/.npmrc 添加淘宝的镜像源： 1electron_mirror=&quot;https://npm.taobao.org/mirrors/electron/&quot; 使代码立即生效： 1source ~/.npmrc 重新尝试下载即可。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[React Native 各种坑]]></title>
      <url>%2F2018%2F02%2FReact%20Native%20%E5%90%84%E7%A7%8D%E5%9D%91%2F</url>
      <content type="text"><![CDATA[FlatList 报错 keyExtractor 未指定唯一的 key1VirtualizedList: missing keys for items, make sure to specify a key property on each item or provide a custom keyExtractor. keyExtractor 用于为给定的item生成一个不重复的key。若不指定此函数，则默认抽取item.key作为key值。若item.key也不存在，则使用数组下标index。 解决方法：添加 _keyExtractor = (item, index) =&gt; index; 。 12345678910111213141516renderLoadingView() &#123; ...&#125; _keyExtractor = (item, index) =&gt; index;renderMovie(movie) &#123; ...&#125;render() &#123; &lt;FlatList ... keyExtractor=&#123;this._keyExtractor&#125; /&gt;&#125; React Native中文网电影列表示例中的错误上边”FlatList 报错 keyExtractor 未指定唯一的 key“是其中一个问题。 123456789101112131415renderMovie(movie) &#123; console.log(movie) return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Image source=&#123;&#123;uri: movie.posters.thumbnail&#125;&#125; style=&#123;styles.thumbnail&#125; /&gt; &lt;View style=&#123;styles.rightContainer&#125;&gt; &lt;Text style=&#123;styles.title&#125;&gt;&#123;movie.title&#125;&lt;/Text&gt; &lt;Text style=&#123;styles.year&#125;&gt;&#123;movie.year&#125;&lt;/Text&gt; &lt;/View&gt; &lt;/View&gt; ); &#125; 请求到数据后按照示例上边这种写法会一直黄色 warning ，提示： 123Possible Unhandled Promise Rejection (id: 0):TypeError: Cannot read property &apos;thumbnail&apos; of undefinedTypeError: Cannot read property &apos;thumbnail&apos; of undefined 这时候打印请求到的 movie 是这样的： 所以，真实数据应该是 movie.item 。 1234567891011121314renderMovie(movie) &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Image source=&#123;&#123;uri: movie.item.posters.thumbnail&#125;&#125; style=&#123;styles.thumbnail&#125; /&gt; &lt;View style=&#123;styles.rightContainer&#125;&gt; &lt;Text style=&#123;styles.title&#125;&gt;&#123;movie.item.title&#125;&lt;/Text&gt; &lt;Text style=&#123;styles.year&#125;&gt;&#123;movie.item.year&#125;&lt;/Text&gt; &lt;/View&gt; &lt;/View&gt; ); &#125; ReactNative:The development server returned response error code: 500。1I&apos;m making react-native app with my frd. So I got the code my frd first made and I wanted to open my computer. I think I set everything and did tcp:8081 setting in dev menu. but I got error message after started react-native packager. I use real phone device. 运行 ReactNative 项目时出现500的错误，最后通过给 babel-preset-react-native 降级或者安装来解决了这个问题。 1234//npmnpm install babel-preset-react-native@2.1.0 —save//yarnyarn add babel-preset-react-native@2.1.0 记得安装后要重启项目。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[VS Code 造成 cpu 跑满的问题排查]]></title>
      <url>%2F2018%2F02%2FVS%20Code%20%E9%80%A0%E6%88%90%20cpu%20%E8%B7%91%E6%BB%A1%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%2F</url>
      <content type="text"><![CDATA[每次一打开 VS Code 电脑 cpu 就跑满，今天终于排查到了原因。主要影响的插件有两个： CSS Peek跳转到 CSS 定义行的插件 IntelliSense for CSS class namescss class输入提示的插件开启插件时：关闭插件时：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[微信小程序要点记录]]></title>
      <url>%2F2018%2F01%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%A6%81%E7%82%B9%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[弹出框贴合手机键盘需求点击页面按钮时弹出悬浮输入框，输入框底部位置贴合在手机键盘顶部。 问题由于无法获取手机键盘高度及手机键盘顶部到页面顶部的距离，所以用高度计算的方式无法定位弹出框的定位位置。错误的实现方式： 实现官方文档中指出了 cursor-spacing 属性的作用，可以试上一试。 12//cursor-spacing指定光标与键盘的距离，单位 px 。取 textarea 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离 关键技术点修改弹出框的样式定位： 12position:absolute;bottom: 0; 为弹出框内的 input 或者 textarea 添加 cursor-spacing 属性，类型为 number，单位是 px，具体数字根据弹出框的高度来决定，官方文档中已有说明。 结果完美达到预期。 video 组件层级无法修改的问题官方文档中已经明确说明了这个问题，当页面中有自定义的悬浮按钮或者是底部固定栏，滚动页面就会出现 video 组件穿插覆盖到了最顶层的问题。如果想避免出现这种问题可通过使用 cover-view 视图容器来规避。 12//cover-view覆盖在原生组件之上的文本视图，可覆盖的原生组件包括map、video、canvas、camera，只支持嵌套cover-view、cover-image。 注意：cover-view 内外都只支持嵌套 cover-view、cover-image两个标签。所以如果原本想用 button 按钮直接 auto-share 时只能改为在 js 中配置分享,同样如果原本想用 navigator 导航时也就只能在 js 中指定导航了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[用JSON格式的开源文档]]></title>
      <url>%2F2018%2F01%2F%E5%B8%B8%E7%94%A8JSON%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%96%87%E6%A1%A3%2F</url>
      <content type="text"><![CDATA[常用JSON格式的开源文档 如图，包含了以下三种文档格式： 1231. bower.json2. install.json3. package.json 详情页内进一步介绍了相关参数及示意。 地址：https://github.com/qumuase/JSON 欢迎拍砖，欢迎 star。文档内容还在继续更新完善，稍后也会支持移动端。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[webpack 打包压缩 ES6文件报错 UglifyJs + Unexpected token punc (()]]></title>
      <url>%2F2018%2F01%2Fwebpack%20%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9%20ES6%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99%20UglifyJs%20%2B%20Unexpected%20token%20punc%20(()%2F</url>
      <content type="text"><![CDATA[报错信息1234ERROR in static/js/app.cc5c533156716b3e128a.js from UglifyJsUnexpected token: punc (() [static/js/app.cc5c533156716b3e128a.js:187,9] Build failed with errors. 原因目录下缺少 .babelrc 文件，无法编译 ES6 代码。 方法方法一添加并配置此文件即可。Babel 是将 ES6 代码转为 ES5 代码的转码器，.babelrc 就是 Babel 的配置文件。规则如： 123456789101112131415161718&#123; &quot;presets&quot;: [ [&quot;env&quot;, &#123; &quot;modules&quot;: false, &quot;targets&quot;: &#123; &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;= 8&quot;] &#125; &#125;], &quot;stage-2&quot; ], &quot;plugins&quot;: [&quot;transform-runtime&quot;], &quot;env&quot;: &#123; &quot;test&quot;: &#123; &quot;presets&quot;: [&quot;env&quot;, &quot;stage-2&quot;], &quot;plugins&quot;: [&quot;istanbul&quot;] &#125; &#125;&#125; 方法二可使用 npm 或 yarn 安装 babel-cli 进行命令行转码。 更多 babel 相关知识可查看 http://www.ruanyifeng.com/blog/2016/01/babel.html 。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Vue2 要点记录]]></title>
      <url>%2F2017%2F12%2FVue2%20%E8%A6%81%E7%82%B9%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[Vue 函数调用 this 问题在函数内调用全局 this 的方法时，this 的指向已经发生了变化，此时只需将函数改为箭头函数即可。 1234567//报错disabledDate(time) &#123; this.$message(&#123; message: &apos;请选择今天之前的日期！&apos;, type: &apos;warning&apos; &#125;);&#125; 1234567//正解disabledDate: (time) =&gt; &#123; this.$message(&#123; message: &apos;请选择今天之前的日期！&apos;, type: &apos;warning&apos; &#125;);&#125; 这是由于箭头函数内部的 this 是词法作用域，由上下文确定。 更新中。。。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linode IP 被墙后的更换 IP 之路]]></title>
      <url>%2F2017%2F12%2FLinode%20IP%20%E8%A2%AB%E5%A2%99%E5%90%8E%E7%9A%84%E6%9B%B4%E6%8D%A2%20IP%20%E4%B9%8B%E8%B7%AF%2F</url>
      <content type="text"><![CDATA[修改端口首先应该尝试修改端口，可能仅仅只是端口被封了。 原有修改 IP 的途径网上的帖子全都是很久之前的方法了，基本上解决方法全都是开一个 ticket，联系客服直接更换一个 IP。殊不知现在这种方式已经行不通了。现在由于 GFW 的原因需要修改 IP 的问题已经被列为热门问题了，且描述中明确说明了不再为这种原因的客户修改 IP。 下面这张图是新版 Linode 客服中心的热门问题截图，可以看到解决方式还是原来的方式，尝试用这种方式联系客服被告知已经不可行。这应该只是新版内容同步问题：可以看到之前只需要添加两个 MTR 的网络诊断报告即可更换 IP。 现今修改方式 1、联系客服添加一个 IP，1$/m。2、同区下新添加一个实例，然后把原有数据迁移至新实例下。3、联系客服更换至其他区，比如日本迁至新加坡或者美西弗里蒙特（Fremont）。4、直接删除实例重新购买，如果当前实例下没有重要文件的话。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[各平台安装使用 MTR 诊断网络]]></title>
      <url>%2F2017%2F12%2F%E5%90%84%E5%B9%B3%E5%8F%B0%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%20MTR%20%E8%AF%8A%E6%96%AD%E7%BD%91%E7%BB%9C%2F</url>
      <content type="text"><![CDATA[下载、安装macOS：一种方式：下载地址：http://rudix.org/packages/mtr.html根据自己系统版本下载对应的 MTR 版本安装即可。另外一种方式：使用 brew 在线安装： 1brew install mtr Ubuntu：123apt-get updateapt-get upgradeapt-get install mtr-tiny CentOS：12yum updateyum install mtr Windows：手动下载安装 http://winmtr.net/ 运行 cd 到 /usr/local/sbin ，ls即可看到 mtr，直接键入 mtr 即可运行。注：mtr 需要 root 权限，报错时尝试添加 root 权限。 运行结果 可查看循环次数下的丢包率、最慢、最快、平均时长及差值等数据。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[基于 Vue2.0 + Element 的单页面可视化开发实践]]></title>
      <url>%2F2017%2F11%2F%E5%9F%BA%E4%BA%8E%20Vue2.0%20%2B%20ElementUI%20%E7%9A%84%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%8F%AF%E8%A7%86%E5%8C%96%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%2F</url>
      <content type="text"><![CDATA[需求项目迭代，要重构出一个可供用户操作的，可自由选择模板，可定制内容的页面。相当于这个单页面上最终展示的所有内容，都是由用户自己去定制完成的。细想之后觉得使用 Vue 来做比较合适，因为页面上大部分操作都可理解为是对总体数据的再排序编辑。下边是记录的开发过程中一些相对关键的问题。 Vue 原始数据的深复制由于 JS 对象的引用类型特点，在一些不需要双向绑定数据的时候，需要通过深拷贝原始的数据对象来暂存数据，即用 JSON.parse(JSON.stringify(…)) 的方式复制一份数据来进行操作。一般情况下组件间的数据干扰等情况都是由于此问题导致的。 默认数据与已编辑数据的分离最开始做的时候未考虑到这个问题，使用了简单粗暴的方法调取默认数据，即在进入页面的时候复制一份数据充当默认数据。之后发现这个会导致用户操作数据后默认数据也跟着改变的问题。良好的解决方法就是相互分离，全部都是独立请求。 Element 的 Dialog 对话框监听Dialog 方面，由于目前 Element 2.0版本是在页面加载时直接将需要用到的所有 Dialog 生成好然后 hide 掉，切换状态时只是执行了 show/hide 操作，考虑到复用性问题，并非销毁及重新生成，所以在数据的监听更新上会可能存在只有首次才能触发到的问题，处理办法之一就是监听影响对话框显示隐藏的属性，如官方示例中的 dialogVisible ，进而执行对话框显示时的数据更新等操作。 本地开发的数据请求跨域问题一方面可通过 webpack-dev-server 添加配置 disableHostCheck: true 来修改它的默认查找 hostname 的行为。也可以配置config &gt; index.js 下 proxyTable 来解决此问题。 123456789proxyTable: &#123; &apos;/api&apos;: &#123; target: &apos;http://api.x.com&apos;, changeOrigin: true, pathRewrite: &#123; &apos;^/api&apos;: &apos;/api&apos; &#125; &#125;&#125; 另：Vue-CLI 的功能是其使用了 http-proxy-middleware 插件github：https://github.com/chimurai/http-proxy-middleware 数据的存储调取使用 localstorage 来存储用于区分身份的 ID，根据不同 ID 使用 axios 来进行服务端的数据请求。如果牵涉跨域是需要添加 JSONP 模块的。链接：https://github.com/axios/axios/blob/master/COOKBOOK.md#jsonp 待改进 未使用 Vue 懒加载，由于操作逻辑的复杂性，首页所有的 JS 文件将近800 KB ，如果以后迭代功能 JS 文件还可能更大，可能会有更大的 JS 文件，结果可能会导致首次加载等待时间较长，所以理想状态下是考虑加入懒加载，按需加载 JS 提前规划。 未使用 Vuex，目前组件间的数据通讯全都是通过 prop 传参的形式实现的。虽然目前组件间还不存在大范围共享数据的问题，但是引入 Vuex 进行数据处理还是很有必要的。随着项目的复杂化推进目前组件间的传参会越来越显的笨重。 在最后以上要点是整个首页项目提取出来的一些关键性问题，随着第一个Vue 项目的告一段落，不得不感叹数据驱动型真是简单、便捷、高效。相比之前 jQuery 的查找、绑定 DOM 而后再渲染确实完全没法比。尝试新事物总是让人兴奋不止。 补充中。。。 如有问题，欢迎指正！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[自行搭建Shadowsocks服务]]></title>
      <url>%2F2017%2F10%2F%E8%87%AA%E8%A1%8C%E6%90%AD%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%2F</url>
      <content type="text"><![CDATA[首先你得有自己的国外服务器或者是VPS，然后再继续往下看。以下所有命令都是以 root 用户执行，且本人是 ubuntu 系统，所以只以 ubuntu 操作系统为例。 安装123apt-get updateapt-get install git -ygit clone -b manyuser https://github.com/ToyoDAdoubi/shadowsocksr.git 执行完毕后此目录下会新建一个 shadowsocksr 目录，如果你是在 /root 目录下执行上面的代码，那你 shadowsocksr 的根目录就是 /root/shadowsocksr ，子目录就是 /root/shadowsocksr/shadowssocks 。 配置12345678//进入服务根目录cd shadowsocksr//初始化bash initcfg.sh//修改配置文件vim user-config.json 文件内容一般为： 1234567891011121314151617181920212223&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_ipv6&quot;: &quot;::&quot;, &quot;server_port&quot;: 8388, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1080, &quot;password&quot;: &quot;m&quot;, &quot;timeout&quot;: 120, &quot;udp_timeout&quot;: 60, &quot;method&quot;: &quot;aes-128-ctr&quot;, &quot;protocol&quot;: &quot;auth_aes128_md5&quot;, &quot;protocol_param&quot;: &quot;&quot;, &quot;obfs&quot;: &quot;tls1.2_ticket_auth_compatible&quot;, &quot;obfs_param&quot;: &quot;&quot;, &quot;speed_limit_per_con&quot;: 0, &quot;speed_limit_per_user&quot;: 0, &quot;dns_ipv6&quot;: false, &quot;connect_verbose_info&quot;: 0, &quot;redirect&quot;: &quot;&quot;, &quot;fast_open&quot;: false&#125; 可精简为： 12345678910&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;port_password&quot;: &#123; &quot;1838&quot;: &quot;mypassword&quot;, &quot;2338&quot;: &quot;mypassword&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false&#125; 初始化的状态为单用户版，此处精简写法配置的是多用户版本，其中 port_password 为服务端口及密码。 启动1234567891011121314//进入子目录cd shadowsocks//添加权限chmod +x *.sh//启动服务./logrun.sh//查看服务日志./tail.sh//停止服务./stop.sh 设置开机自启动123chmod +x /etc/rc.localvi /etc/rc.local 然后在 exit 0 这一行代码的前面加上： 1/bin/bash /root/shadowsocksr/shadowsocks/logrun.sh 属性 默认 说明 server 0.0.0.0 监听地址 server_ipv6 :: ipv6地址 server_port 8388 监听端口 local_address 127.0.0.1 本地地址 local_port 1080 本地端口 password m 密码 timeout 120 超时时间 method aes-128-ctr 加密方式 protocol_param ‘’ 协议插件参数，可设置每个端口的链接设备数 protocol auth_aes128_md5 协议插件 obfs tls1.2_ticket_auth_compatible 混淆插件 obfs_param ‘’ 混淆插件参数 speed_limit_per_con 0 单线程限速 单位KB/S speed_limit_per_user 0 端口总限速 单位 KB/S redirect ‘’ 重定向参数 dns_ipv6 false 是否优先使用IPv6地址 fast_open false 快速打开(仅限linux客户端) ps: 搭建成功4个小时之后服务器ssh无法远程登录了，IP可 ping 通，服务器上的网站无法打开，原因还在查找中。不能这么快就被封了吧。。。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ErrorLevelAnalysis--ELA(错误级别分析)图片技术详解]]></title>
      <url>%2F2017%2F09%2FErrorLevelAnalysis--ELA(%E9%94%99%E8%AF%AF%E7%BA%A7%E5%88%AB%E5%88%86%E6%9E%90)%E5%9B%BE%E7%89%87%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[薛之谦事件炒的实在是精彩，时间战线拉的也是够长，颇有一番你方唱罢我登场的意思。时间爆料发展过程中吃瓜群众是看的过瘾，也新出了求锤得锤、你再和人家做X怎么办？我就跳轨这样的热门网络梗。同时针对方法晒图的真伪性吃瓜群众也是不甘只为局外人，出现了两类热心派：一类通过图片放大、降低亮度、高斯、文字大小对比等 PhotoShop 手法判断双方图片真伪，另外一类通过ELA技术来进行对比分析。ELA 是什么，很多人比较陌生，本篇文章就简单的介绍一下。 ELAELA 全称：Error Level Analysis ，汉译为“错误级别分析”或者叫“误差分析”。通过检测特定压缩比率重新绘制图片后造成的误差分布，可用于识别JPEG图片的压缩。维基百科：ELA是对JPEG有损压缩的数字数据中的压缩影片进行分析。ELA技术可参考 Neal Krawetz先生 在其 07年论文 中的详细介绍。 原理把图片分割成很多8x8个正方形中的1像素点，对每一个小块进行单独的色彩空间转换。每次对 JPG 图片的修改，都会进行第二次转换。两次转换自然会存在差异，ELA 就是靠对比这种差异来判断图片的哪部分被修改过。 点，指画面中的重复纹理或者类似数据，重复纹理在ELA分析的时候应该表现出近似的颜色，细节较多的区域数据差异也应该大。 线，是不同颜色大面之间的交界线，相同反差边缘应该表现出近似的ELA结果。反差越大，ELA值越高，线条越清晰。 面，纯色面不存在差异，也就不存在ELA，黑色或黑色着色。 如果非JPEG图片包含可见的网格线（8×8个正方形中的1像素点），则表示图片由JPEG格式转换为非JPEG格式（例如PNG）。如果图片是原始PNG，则ELA是边缘和纹理生成非常高的值。如果ELA沿边缘和纹理产生弱结果（黑色或黑色着色），则PNG可能是由JPEG转化而来的。 示例 http://www.errorlevelanalysis.com 是专门做ELA分析的网站，可惜现在已经关闭了。但还是保留了一个示例作为参考(请留意嘴唇、衬衫以及眼睛，这些部分与其周围因素是有所不同的，根据推测是经过修改的，区域变亮)： Jonas Wagner 的测试(可以看到假的部分图片明显高亮于其周围区域)： 原始照片在重新保存期间具有高度的变化（高ELA值）。后续的任何操作都将降低ELA值，产生较暗的ELA结果： 原图原ELA重新保存一次：二次保存图二次保存后ELA修改图片内容(复制了绿皮书及放置了恐龙玩具)：修改后图片修改后ELA 局限性 ELA只是一种算法，由于其分析压缩的性质，无损压缩的数据（如PNG图片）及图片色彩减少到256色以下(转换为GIF图)，ELA 是没有作用的。 如果图片被重新保存多次，那么它可能完全处于最小错误级。在这种情况下，ELA将显示黑色图片，且不能使用该算法来识别修改。目前这个算法并不是完全可靠的，尤其是经过多次压缩的图片。 ###拓展 Neal Krawetz先生 的 演讲文档https://29a.ch/ 也有其他关于图片处理的技术，比如：自动化图片裁剪主题区域(非暴力裁剪中心区域)的 smartcrop.js 介绍页 | 示例页 | 测试页 | GitHub图片滤镜 Film Emulator测试页 | GitHub 1234567参考资料：· http://www.hackerfactor.com/· http://www.wired.com/images_blogs/threatlevel/files/bh-usa-07-krawetz.pdf· http://www.errorlevelanalysis.com/· http://fotoforensic.com/tutorial-ela.php· https://29a.ch/· https://en.wikipedia.org/wiki/Error_level_analysis]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MAC主要下载工具分析对比]]></title>
      <url>%2F2017%2F09%2FMAC%E4%B8%BB%E8%A6%81%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90%E5%AF%B9%E6%AF%94%2F</url>
      <content type="text"><![CDATA[You-Get 官方项目主页：https://github.com/soimort/you-getYou-Get 官网：https://you-get.org/You-Get 官方中文说明：https://github.com/soimort/you-get/wiki/中文说明/ 命令行工具 支持主流网站下载 免费 可配置（-c 添加cookie 下载会员清晰度视频） 1234567891011you-get https://www.bilibili.com/video/av14221434/site: Bilibilititle: 【ACI字幕组】空中浩劫S17E07:复兴航空235号班机(中英双语 首发V2）stream: - format: mp4 container: mp4 size: 314.1 MiB (329310578 bytes) # download-with: you-get --format=mp4 [URL]Downloading 【ACI字幕组】空中浩劫S17E07-复兴航空235号班机(中英双语 首发V2）.mp4 ...15.5% ( 48.8/314.1MB) ├███████████──────────────────────────────────────────────────────────────┤[1/1] 3 MB/s Downie Downie 官网：https://software.charliemonroe.net/downie.php官方五折（50% off）优惠码C5AE418A（请自行验证有效性） 客户端工具 拖拽下载 支持1300+网站下载，包含某些成人网站 查看热门 收费$19.99 youtube-dl youtube-dl 官网：https://rg3.github.io/youtube-dl/ Aria2Folx GO+迅雷忽略 更新中]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular2-使用Angular CLI快速搭建项目常见问题]]></title>
      <url>%2F2017%2F09%2FAngular2-%E4%BD%BF%E7%94%A8Angular%20CLI%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[开发环境：在终端/控制台窗口中运行命令 node -v 和 npm -v查看相应版本，要求node 6.9.x 和 npm 3.x.x 以上的版本，更老的版本可能会出现错误，更新的版本则没问题。升级Nodejs至最新稳定版: 12//执行此命令（注：stable是稳定的意思）n stable 由于权限问题，Mac或Linux平台可能会报以下错误： 1234 install : node-v8.4.0 mkdir : /usr/local/n/versions/node/8.4.0mkdir: /usr/local/n/versions/node/8.4.0: Permission denied Error: sudo required 解决方法： 12//命令前添加sudo，执行之后输入密码sudo n stable 12345install : node-v8.4.0 mkdir : /usr/local/n/versions/node/8.4.0 fetch : https://nodejs.org/dist/v8.4.0/node-v8.4.0-darwin-x64.tar.gz######################################################################## 100.0% installed : v8.4.0 再执行node -v查看版本即已升级。同理可得，npm也是这种方式升级： 123sudo npm install npm -g//可用淘宝镜像cnpm代替npm进行升级npm自身版本sudo cnpm install npm -g ###安装Angular CLI此步也是牵涉sudo权限问题： 123sudo npm install -g @angular/cli//亦可通过cnpm安装sudo cnpm install -g @angular/cli 稍等片刻就安装成功了，可执行ng命令查看所有相关命令。 ###创建项目ng创建一个新项目： 1ng new my-app 此时可能会在项目初始化成功后出现如下错误： 12345678910111213141516171819202122232425262728293031323334353637installing ng create .editorconfig create README.md create src/app/app.component.css create src/app/app.component.html create src/app/app.component.spec.ts create src/app/app.component.ts create src/app/app.module.ts create src/assets/.gitkeep create src/environments/environment.prod.ts create src/environments/environment.ts create src/favicon.ico create src/index.html create src/main.ts create src/polyfills.ts create src/styles.css create src/test.ts create src/tsconfig.app.json create src/tsconfig.spec.json create src/typings.d.ts create .angular-cli.json create e2e/app.e2e-spec.ts create e2e/app.po.ts create e2e/tsconfig.e2e.json create .gitignore create karma.conf.js create package.json create protractor.conf.js create tsconfig.json create tslint.jsonYou can `ng set --global packageManager=cnpm`.Installing packages for tooling via npm.npm ERR! code MODULE_NOT_FOUNDnpm ERR! Cannot find module &apos;internal/fs&apos;Package install failed, see above.Package install failed, see above. 重要的是最后几句，此时去启动配置服务器是启动不起来的，解决方法就直接按照提示执行即可。 1ng set --global packageManager=cnpm 相当于用cnpm代替npm，之后再重新创建项目然后如下命令启动开发服务器即可进行项目调试了。 12cd my-appng serve --open]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[AngularJS如何操作渲染后动态生成的元素]]></title>
      <url>%2F2017%2F08%2FAngularJS%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9C%E6%B8%B2%E6%9F%93%E5%90%8E%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E7%9A%84%E5%85%83%E7%B4%A0%2F</url>
      <content type="text"><![CDATA[前言：jQuery中，动态生成的一个元素，想要进行后续操作，可通过delegate／on／live方法（在jquery3.0中已经废除了bind方法）。 AngularJS的事件监听机制针对的是已经生成的DOM进行操作，而在指令中动态生成的DOM节点或其他方式后添加的DOM，是不能被JS事件监听到。换言之，非动态插入DOM的情况下，ng-click指令之所以生效，是因为AngularJS在编译阶段将绑定了ng-click的DOM绑定到了当前作用域。而在AngularJS编译阶段之后插入的DOM，当前作用域对于这个指令是未知的，所以不会生效。 实例： 12345678910var app = angular.module(&apos;app&apos;,[]);app.directive(&apos;nav&apos;,function()&#123; return&#123; restrict:&apos;AC&apos;, template:&apos;&lt;div ng-click=&quot;navbar()&quot;&gt;This is navbar.&lt;/div&gt;&apos;, link:function(scope,el,attr)&#123; ... &#125; &#125;&#125;) 显而易见，这段代码会生成新的DOM： 1&lt;div ng-click=&quot;navbar()&quot;&gt;This is navbar.&lt;/div&gt; 但是，直接操作上述绑定的ng-click是不会生效的，原因就是前言中叙述的问题。 解决方法：一、$compile通过手动调用$compile服务，将DOM对象绑定到当前作用域，编译DOM，实现动态元素的事件绑定。 12var template:&apos;&lt;div ng-click=&quot;navbar()&quot;&gt;This is navbar.&lt;/div&gt;&apos;,var content = $compile(template)($scope); 或者这样： 123456789// 在某个controller中，用jQuery删除动态生成的DOM$compile($(this).remove())($scope);// 用jQuery动态插入DOM$(&apos;demo&apos;).html( $compile( &apos;&lt;div ng-click=&quot;nav()&quot;&gt;&apos; + &apos;nav&apos; + &apos;&lt;/div&gt;&apos; )($scope)); 原理是先编译DOM，然后编译后的DOM插入到静态节点中，便可实现动态元素的事件绑定。而直接插入DOM至页面中，AngularJS并没有编译，所以ng指令绑定都是无效的。 同时不要忘了$compile服务注入： 123app.directive(&apos;nav&apos;,function($compile)&#123; &#125;) 二、ng-repeat还有一种方式是不需要手动调用$compile服务，而是利用ng-repeat指令，比如： 1234&lt;div class=&quot;form-control&quot; ng-repeat=&quot;nav in navbar&quot;&gt; &lt;p ng-click=&quot;lay()&quot;&gt;@&#123;&#123;nav.text&#125;&#125;&lt;/p&gt;&lt;/div&gt;//项目后端使用的laravel框架所以需要在模版标签前加上`@`符号，防止后端框架编译。 由于ng-repeat会自动将数据内容插入至DOM中，且其本身也会重新编译DOM，相当于替换了手动调用$compile服务的过程，后续操作时只需给navbar数组添加数据即可。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MAC日常抽风解决办法]]></title>
      <url>%2F2017%2F08%2FMAC%E6%97%A5%E5%B8%B8%E6%8A%BD%E9%A3%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
      <content type="text"><![CDATA[一、外接显示器时笔记本屏幕无法点亮：MacBook Pro外接显示器时出现一下几种状况： 无论是否外接显示器笔记本屏幕无法点亮，敲击键盘偶尔闪现登录页面。 未外接显示器时屏幕只有在亮度调至最高时才能点亮。 单按电源键无反应。 command+control+电源键强制重启能正常启动。 原因及解决方法：原因是因为外接显示器时将外接屏幕作为了主屏幕，当拔掉外接显示器电脑休眠再启动时就会出现上述情况。解决方法就是去 电脑系统偏好设置 &gt; 显示器 &gt; 排列 将外接显示器上的白条拖拽移动到笔记本显示器的上方。 这算不算是MAC自己抽风算不明白了呢。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[解决AngularJS加载时页面闪烁(错乱)的几种方式及原理]]></title>
      <url>%2F2017%2F08%2F%E8%A7%A3%E5%86%B3AngularJS%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%A1%B5%E9%9D%A2%E9%97%AA%E7%83%81(%E9%94%99%E4%B9%B1)%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%8E%9F%E7%90%86%2F</url>
      <content type="text"><![CDATA[原因：AngularJS 应用在加载时，文档可能会由于AngularJS 代码未加载完而出现显示 AngularJS 代码（如2），进而会有闪烁的问题，也就是在加载请求的时候页面会看到一瞬间的错乱。确切的说就是由于JavaScript去操作DOM，都会等待DOM加载完成（DOM ready）。同样AngularJS会在DOM ready之后才会去解析html view Template。页面错乱闪烁就是发生在AngularJS解析之前。专业名词叫：Flash of Unrendered Content ，简称FOUC。 解决方法：1. ng-bind用ng-bind将内容同元素绑定在一起避免这个问题。 1ng-bind 2. ng-cloakng-cloak 指令就是为了防止该问题而生。 1&lt;div ng-cloak&gt;&#123;&#123; 1 + 1 &#125;&#125;&lt;/div&gt; 页面内使用次数无限制，且无参数。 ng-cloak原理：ng-cloak实现原理为一个directive，在页面初始化时在DOM的head增加一行CSS代码，如下： 1&lt;style type=&quot;text/css&quot;&gt;@charset &quot;UTF-8&quot;;[ng\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate)&#123;display:none !important;&#125;ng\:form&#123;display:block;&#125;&lt;/style&gt; AngularJS将带有ng-cloak的元素设置为display：none。在等到AngularJS解析到带有ng-cloak节点的时候，会把元素上ng-cloak attribute和calss同时remove掉，这样就防止了节点的闪烁。查阅AngularJS源码可以在最后一行看到实现代码： 1!window.angular.$$csp() &amp;&amp; window.angular.element(document).find(&apos;head&apos;).prepend(&apos;&lt;style type=&quot;text/css&quot;&gt;@charset &quot;UTF-8&quot;;[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate)&#123;display:none !important;&#125;ng\\:form&#123;display:block;&#125;&lt;/style&gt;&apos;); 看上去问题已经解决了。但是！如果浏览器的速度比AngularJS在head中加入css的速度还快这方法就失效了。怎么办？那就事先手动把这些css加入我们的样式文件然后引入head里。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[微信小程序时间轴]]></title>
      <url>%2F2017%2F06%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%97%B6%E9%97%B4%E8%BD%B4%2F</url>
      <content type="text"><![CDATA[2017.06.28 通过审核并上线、调整图片信息展示形式2017.06.25 添加https请求域名、提交审核2017.06.24 申请DV https证书2017.06.23 添加长按下载图片功能2017.06.22 添加展示图片大小、发布V0.5 体验版2017.06.21 添加预览下载图片功能2017.06.20 添加读取七牛云空间固定数量图片功能2017.06.19 添加最新及关于版块2017.06.18 确定图片展示界面样式]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Godaddy域名续费技巧]]></title>
      <url>%2F2017%2F06%2FGodaddy%E5%9F%9F%E5%90%8D%E7%BB%AD%E8%B4%B9%E6%8A%80%E5%B7%A7%2F</url>
      <content type="text"><![CDATA[最近在Godaddy的域名即将到期需要续费，但是赶上了Godaddy官方取消了大部分的优惠码的使用，只能通过其他途径查找优惠。于是发现了可通过汇率及地域的差异进行变相优惠的方法： 上图可以看到三种货币下的无优惠续费价格。 12345按照当前汇率（2017.06.20）$15.17 = ¥103.28¥102.14 = ¥102.14 ₹711.00 = ¥75.2285 价格一路了然，这个货币国家就是印度。所以在Godaddy页面左上方把货币修改成印度国卢比很有必要。当然最后结算时候应该是只能用外币&#65295;双币信用卡，单货币银联卡可不可以就需要自己试一试了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo搭建Github Pages及Coding Pages博客操作指南]]></title>
      <url>%2F2017%2F06%2FHexo%E6%90%AD%E5%BB%BAGithub-Pages%E5%8F%8ACoding-Pages%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%2F</url>
      <content type="text"><![CDATA[凡事请先阅读官方教程。此处不包含官方教程所包含内容。 目录结构1234567891011.├── .deploy├── public├── scaffolds├── scripts├── source| ├── _drafts| └── _posts├── themes├── _config.yml└── package.json .deploy：执行hexo deploy命令部署到相关Pages 服务商上的内容目录 public：执行hexo generate命令，输出的静态网页内容目录 scaffolds：layout模板文件目录，其中的md文件可以添加编辑 scripts：扩展脚本目录，这里可以自定义一些javascript脚本 source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 _drafts：草稿文章 _posts：发布文章 themes：主题文件目录 _config.yml：全局配置文件，大多数的设置都在这里 package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 Hexo命令 Hexo下，通过 _config.yml 设置博客，可以想象成我们用的软件里的设置一样，只是它通过一个文件列出这些参数，然后让我们填写和修改。 全局设置在你博客目录下有一个文件名_config.yml，打开可以配置信息。 局部页面在你博客目录下 \themes\你使用的主题\_config.yml 写博客相关命令 1234567Hexo常用命令：hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;退出server）hexo deploy #将.deploy目录部署到相关Pages 服务商 相关命令简写： 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 同时也支持复合命令： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 有时候生成的网页会报错，生成的rss因为没有清除，一般情况下用已下命令，重新生成即可。 1$ hexo clean 添加README.md文件及添加不想被解析渲染的页面想要README.md文件不被解析渲染，只需在博客根目录下的配置文件_config.yml中配置”skip_render”选项： 1skip_render: README.md 其他页面也是添加到此处即可，多值参照数组形式排列： 1skip_render: [README.md,xxx]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git日常报错]]></title>
      <url>%2F2017%2F05%2Fgit%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%2F</url>
      <content type="text"><![CDATA[Permission denied (publickey)已生成并添加 SSH 密钥的情况下报错： 12345Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 实测在 .ssh 文件夹中执行1ssh-add id_rsa 提示：Identity added: id_rsa (id_rsa)即可。 git clone 报403错误由于某些原因项目由GitLab迁移至Coding托管，而本地需要重新部署，本地重新克隆远程仓库时出现了403错误： root@xxx: git clone https://git.coding.net/xxxxxxxx/xxxx.gitcloning ‘xxx’…remote: Coding.net Tips : [You have no permission to access this repo.]fatal: unable to access ‘https://git.coding.net/xxxxxxxx/xxxx.git/‘: The requested URL returned error: 403 经查阅是因为本地缓存了错误的密码(其实保存的是之前项目仓库的密码，现在克隆的仓库还没有声明账号和密码)。这种情况下其中一种解决办法就是克隆时将账号和密码也添加到~/.git-credentials： http://username:password@git.coding.net/xxxxxxxx/xxxx.git 如果是首次使用Coding配置项目，是需要在账号下填写密钥滴。如同GitHub或GitLab使用时的配置方法。 git clone 需要服务器密码123456ssh-agent -s然后会提示类似的信息：SSH_AUTH_SOCK=/tmp/ssh-GTpABX1a05qH/agent.404; export SSH_AUTH_SOCK; SSH_AGENT_PID=13144; export SSH_AGENT_PID; echo Agent pid 13144; 123456789ssh-add ~/.ssh/id_rsa这时候应该会提示：Identity added: ...（这里是一些ssh key文件路径的信息）（注意）如果出现错误提示：Could not open a connection to your authentication agent.请执行命令：eval `ssh-agent -s`后继续执行命令 ssh-add ~/.ssh/id_rsa。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Framework7实现路由跳转]]></title>
      <url>%2F2017%2F05%2FFramework7%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%2F</url>
      <content type="text"><![CDATA[Framework7 是一个开源免费的框架可以用来开发混合移动应用（原生和HTML混合）或者开发 iOS &amp; Android 风格的WEB APP。 由于Framework7是通过ajax加载新页面，因此Framework7属于单页面编程用法。比如： 1&lt;a href=&quot;index.html&quot;&gt;Go to About page&lt;/a&gt; 当我们点击这个链接的时候，Framework7会通过Ajax获取 index.html，解析它的内容，然后把它实时插入到DOM中，并且做一个动画切换到这个新页面。因此在默认情况下页面路由是不会发生变化的，但是在个别特例时候我们需要路由变化实现页面跳转。 实现路由跳转的方式官方实例化方法有以下几种： ajaxLinks参数在初始化应用（英文）| 初始化应用（中文）时候传递不同的 ajaxLinks 参数。关于ajaxLinks参数的官方说明： 参数 类型 默认值 说明 router string undefined 指定哪些链接需要用ajax加载，默认情况下（当为undefined时）Framework7 会使用ajax加载所有的链接。你可以通过设置一个CSS选择器来指定需要通过Ajax加载的链接，比如 “a.ajax” - 只有class 为 “ajax” 的链接。 router参数同时也可以配置router参数实现自己的路由方式。关于router参数的官方说明： 参数 类型 默认值 说明 router boolean true 如果你有自己的路由实现，你可以禁用默认的路由 externalLinks参数为每个需要实现路由跳转的链接添加 external class类名，🌰：&lt;a href=&quot;index.html&quot; class=&quot;external&quot;&gt;。同时正确href值的链接（比如是空的或者是 #）也不会实现ajax加载新页面。当然后者在常见实际项目中是很少出现的。关于externalLinks参数的官方说明： 参数 类型 默认值 说明 externalLinks string ‘.external’ 不应该被 Framework7 管理的链接的CSS选择器。比如 “.external” 会匹配到这样的链接 &lt;a href=&quot;somepage.html&quot; class=&quot;external&quot;&gt; (因为它有 “external” 类) pushState参数关于pushState相关参数的官方说明： 参数 类型 默认值 说明 pushState boolean false 如果你开发web app（而不是通过PhoneGap封装的混合应用)，那么这个功能将很有用（浏览器的URL将会看上去像这样 &quot;http://my-webapp.com/#/about.html&quot;)。用户可以通过浏览器默认的前进后退按钮来操作。 pushStateSeparator string ‘#!/‘ push state 时候在URL中使用的分隔符，如果改成 “#page/“，那么你的url将会像这样 &quot;http://myapp.com/#page/about.html&quot; pushStateRoot string undefined Push state URL根路径, 比如 &quot;http://my-app.com/&quot;. 只有当你把 pushStateSeparator 设置为空(“”)时才有效。 pushStateNoAnimation boolean false 如果设置为 false，那么会继承当前 View 的 animatePages 参数。如果设置为 true，那么页面切换的时候将没有动画效果。 pushStatePreventOnLoad boolean true 如果开启，则应用程序加载时的第一个弹出状态事件会被忽略，因为它可能会阻止不必要的问题。 但是当你使用异步加载框架（如Require.js）初始化应用程序时，可以禁用它]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Coding Pages自定义域名捆绑跳转页面]]></title>
      <url>%2F2017%2F05%2FCoding%20Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E6%8D%86%E7%BB%91%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%2F</url>
      <content type="text"><![CDATA[Coding强制捆绑五秒跳转页面，影响的人群是Coding绑定自定义域名且拥有者为非付费的会员。跳转页面的出现频率为：1 次/自定义域名/Cookie/天，也就是说，在非隐身模式没有清理 Cookie 的情况下，访问同一个自定义域名，一天只会看到一次跳转页面。所捆绑页面为类似于腾讯公益404页面，一句名人名言附带作者图像。及此页面的相关说明。 Coding Pages等待跳转页面具体说明及删除方法 2017.06.02更新官方已经上线Hosted by Coding Pages，可通过在网站首页放置Coding官方标示进而停掉Coding pages的五秒跳转页面。 2017.06.05更新由于需要添加Hosted by Coding Pages而取消Coding pages的五秒跳转页面，故本站将在Coding pages审核后添加Hosted by Coding Pages &amp; GitHub Pages样字。 2017.06.14更新]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Zeplin新版介绍--已全面支持windows系统]]></title>
      <url>%2F2017%2F05%2FZeplin%E6%96%B0%E7%89%88%E4%BB%8B%E7%BB%8D--%E5%B7%B2%E5%85%A8%E9%9D%A2%E6%94%AF%E6%8C%81windows%E7%B3%BB%E7%BB%9F%2F</url>
      <content type="text"><![CDATA[背景Zeplin，由 Zeppelin 一词演变而来，是一款为设计师和前端开发者提供设计原稿交接与沟通的高效平台，可进行标注、注释，还提供了便利的团队协作功能。目前该软件已全面支持Sketch、Photoshop，最早只支持MAC平台使用，但在16年5月份已经更新了测试版本对windows系统的支持（官方文章）。不过分地说有了Zeplin，马克曼可以退出你的桌面了。(国内也有类似的软件—标你妹，有兴趣的可以研究一下)。 下载无论在任何平台运行，软件方面要求最低是photoshop cc2015版的。mac系统，插件下载地址 面板下载地址着重强调一下windows版本，插件方面可以在应用下载后点击顶部Help &gt; Install Photoshop Plugin板块下载Zeplin的photoshop插件。插件下载地址 面板下载地址 协作使用在项目内右侧点击Invite按钮，然后直接搜索需要添加的组员注册账号或者邮箱添加即可（组员添加后拥有除了踢人之外的所用权限）。 价格目前免费版仅支持创建一个使用中的项目，三个项目的话是每个月19刀（好像是涨价了）。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[技术点记录]]></title>
      <url>%2F2017%2F05%2F%E6%8A%80%E5%B7%A7%E7%82%B9%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[#####Element.scrollIntoView()与Element.scrollIntoViewIfNeeded()123element.scrollIntoView(); // 等同于element.scrollIntoView(true) element.scrollIntoView(alignToTop); // Boolean型参数 element.scrollIntoView(scrollIntoViewOptions); // Object型参数 angularJS监控页面加载完毕 controller内使用watch： 123$scope.$on(&apos;$viewContentLoaded&apos;, function() &#123; console.log(&apos;加载完毕&apos;); &#125;); 使用data-ng-init： 1234视图文件内&lt;div ng-controller=&quot;Dom&quot;&gt; &lt;p data-ng-init=&quot;load()&quot;&gt;&lt;/p&gt; &lt;/div&gt; 1234//controller内$scope.load = function()&#123; console.log(&apos;加载完毕&apos;); &#125; jquery单选框取值问题1$(&apos;.demo&apos;).is(&apos;:checked&apos;)与$(&apos;.demo:checked&apos;) $(&#39;.demo:checked&#39;)会获取到input显式定义checked || checked=&quot;checked&quot;的选项，$(&#39;.demo&#39;).is(&#39;:checked&#39;)获取的是真正点击选中的选项。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo日常报错维护]]></title>
      <url>%2F2017%2F04%2Fhexo%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%E7%BB%B4%E6%8A%A4%2F</url>
      <content type="text"><![CDATA[注：遇到报错应自行排查，或首先查看hexo官方问题解答板块内容（链接：hexo官方问题答疑）。 意外的标记异常（1）1.异常内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051INFO Deleted database.INFO Start processingFATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path) [Line 3, Column 198] unexpected token: &#125;&#125; at Object.exports.prettifyError (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/lib.js:34:15) at new_cls.render (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/environment.js:469:27) at new_cls.renderString (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/environment.js:327:21) at /Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/extend/tag.js:66:9 at Promise._execute (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/debuggability.js:300:9) at Promise._resolveFromExecutor (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:481:18) at new Promise (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:77:14) at Tag.render (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/extend/tag.js:64:10) at Object.tagFilter [as onRenderEnd] (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/hexo/post.js:253:16) at /Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/hexo/render.js:65:19 at tryCatcher (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/util.js:16:23) at Promise._settlePromiseFromHandler (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:510:31) at Promise._settlePromise (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:567:18) at Promise._settlePromise0 (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:612:10) at Promise._settlePromises (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:691:18) at Async._drainQueue (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:133:16) at Async._drainQueues (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:143:10) at Immediate.Async.drainQueues (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:17:14) at runCallback (timers.js:574:20) at tryOnImmediate (timers.js:554:5) at processImmediate [as _immediateCallback] (timers.js:533:5)FATAL (unknown path) [Line 3, Column 198] unexpected token: &#125;&#125;Template render error: (unknown path) [Line 3, Column 198] unexpected token: &#125;&#125; at Object.exports.prettifyError (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/lib.js:34:15) at new_cls.render (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/environment.js:469:27) at new_cls.renderString (/Users/a001/GitHub/qumuase.github.io/node_modules/.2.5.2@nunjucks/src/environment.js:327:21) at /Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/extend/tag.js:66:9 at Promise._execute (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/debuggability.js:300:9) at Promise._resolveFromExecutor (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:481:18) at new Promise (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:77:14) at Tag.render (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/extend/tag.js:64:10) at Object.tagFilter [as onRenderEnd] (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/hexo/post.js:253:16) at /Users/a001/GitHub/qumuase.github.io/node_modules/.3.2.2@hexo/lib/hexo/render.js:65:19 at tryCatcher (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/util.js:16:23) at Promise._settlePromiseFromHandler (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:510:31) at Promise._settlePromise (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:567:18) at Promise._settlePromise0 (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:612:10) at Promise._settlePromises (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/promise.js:691:18) at Async._drainQueue (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:133:16) at Async._drainQueues (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:143:10) at Immediate.Async.drainQueues (/Users/a001/GitHub/qumuase.github.io/node_modules/.3.4.7@bluebird/js/release/async.js:17:14) at runCallback (timers.js:574:20) at tryOnImmediate (timers.js:554:5) at processImmediate [as _immediateCallback] (timers.js:533:5) 2.原因 这种类型的报错一般都是Markdown文章中使用了大括号{ }这个特殊字符，且没有转义导致编译时冲突未通过。 3.解决方法 可以参考Markdown语法规范，将{ }大括号通过 &amp;#123; &amp;#125; 进行转码处理。 意外的标记异常（2）1.异常内容如下： 123456789101112131415161718fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peerFATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peer at ChildProcess.&lt;anonymous&gt; (/Users/a001/GitHub/qumuase.github.io/node_modules/.0.6.0@hexo-util/lib/spawn.js:37:17) at emitTwo (events.js:106:13) at ChildProcess.emit (events.js:191:7) at maybeClose (internal/child_process.js:877:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)FATAL fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peerError: fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peer at ChildProcess.&lt;anonymous&gt; (/Users/a001/GitHub/qumuase.github.io/node_modules/.0.6.0@hexo-util/lib/spawn.js:37:17) at emitTwo (events.js:106:13) at ChildProcess.emit (events.js:191:7) at maybeClose (internal/child_process.js:877:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5) 2.原因 这种类型的报错一般都是Markdown文章中使用了斜杠／这个特殊字符，且没有转义导致编译时冲突未通过。 3.解决方法 可以参考Markdown语法规范，将／斜杠(英文)通过 &amp;#47; ，或／斜杠（中文）通过&amp;#65295;进行转码处理。同时也可以将相关符号用代码（Markdown语法：``）包裹起来即可。 意外的标记异常（3）1.异常内容如下： 123456789101112131415161718fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peerFATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peer at ChildProcess.&lt;anonymous&gt; (/Users/a001/GitHub/qumuase.github.io/node_modules/.0.6.0@hexo-util/lib/spawn.js:37:17) at emitTwo (events.js:106:13) at ChildProcess.emit (events.js:191:7) at maybeClose (internal/child_process.js:877:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)FATAL fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peerError: fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Recv failure: Connection reset by peer at ChildProcess.&lt;anonymous&gt; (/Users/a001/GitHub/qumuase.github.io/node_modules/.0.6.0@hexo-util/lib/spawn.js:37:17) at emitTwo (events.js:106:13) at ChildProcess.emit (events.js:191:7) at maybeClose (internal/child_process.js:877:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5) 2.原因 这种类型的报错经排查是因为在文章头部只有单个tags或者单个categories的时候使用了中括号的原因。 12tags: [hexo]categories: [hexo] 3.解决方法 添加多标签或者多分类，或者删除中括号，直接填写单个标签或者分类。 12tags: [hexo,技巧]categories: [hexo,技巧] 意外的标记异常（4）1.异常内容如下： hexo d 单独执行异常，抛出错误。 12fatal: unable to access &apos;http://github.com/qumuase/qumuase.github.io.git/&apos;: Could not resolve host: github.comFATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html 2.原因 未知。。。（或许是电脑重启后开启了两个 Hexo 服务器）一种新的可能：过程中断网（含泪）。墙的原因。（已排除） 3.解决方法 重启iTerm sitemap报错1.打开网站 sitemap.xml 报错信息如下： 2.原因在GitHub中查看 sitemap.xml 发现以下问题：同时在Xcode中打开本地 sitemap.xml 文件此位置同样是加红报错状态。这是由于特殊符号在 xml 文件中是不能显示且会报错，需要经过转义字符来进行特殊处理。 3.解决方法把 source/_posts/ 下对应文章的标题及title中的 &amp; 等特殊符号替换为转义字符 &amp;amp; 等即可。 特殊符号 对应编码 意义 &lt; \&lt; 小于 &gt; \&gt; 大于 &amp; \&amp; 和 ‘ \&apos; 单引号 “ \&quot; 双引号]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Laravel＋Vuejs实现Task增删改查功能（转）]]></title>
      <url>%2F2017%2F04%2FLaravel%EF%BC%8BVuejs%E5%AE%9E%E7%8E%B0Task%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8A%9F%E8%83%BD%EF%BC%88%E8%BD%AC%EF%BC%89%2F</url>
      <content type="text"><![CDATA[1.创建一条资源路由,如下图2.执行命令php artisan make:controller TaskController --resource，此时,在app/Http/Controllers目录下生成一个TaskController资源控制器，在index方法获取所有的tasks,如下图： 3.在app/resources/view/task目录下创建index.blade.php文件，如下：4.laravel实现的tasks列表功能效果，如下：5.简单的tasks列表展示完成，但是我们要用vuejs实现该功能,首先，直接加载vuejs压缩包，并实例化Vue(el:body表示整个body区域属于vuejs控制).6.把列表展示部分提取出来，放在template标签里面，如下：7.接下来要实现的就是如何用vuejs绑定数据到tempate模版，不废话，直接贴代码： 这里用vue的component组件，第一个模版替换自定义的tasks-app标签，(最好是这种形式,如果是tasks标签随着以后发展可能会加入新标签，避免与之冲突)，第二参数是一个json数据：template是指定哪个模板替换原有自定义标签，data就是数据，返回的是task空数据。我们绑定这个数据都模板，循环li标签这里用vue里的v-for,因为laravel的模板变量标签是&#123;&#123; &#125;&#125;与vuejs的语法冲突，所以在前面加&#123;&#123; &#125;&#125;前加@laravel就不会解析模板标签。 8.因为绑定data里面的tasks数据为空，所以页面展示效果就是没有内容的列表页，如下：9.接下来需要做，如何用vuejs从后台获取数据，绑定到tasks上面? 1直接用jquery库实现get请求获取tasks数据，同时绑定到data数据tasks上。 10.创建tasks的API路由，同时创建TaskApiControler资源控制器，如下：11.此时，tasks列表页的效果又回到我们最开始用laravel实现tasks列表效果相同。12.接下来实现用vuejs实现删除task，同时删除数据记录。不过在这之前加载vuejs的一个插件vue-resource，该插件用法见：vue-resource。在component组件里添加deleteTask方法同时绑定到删除按钮上该删除事件，代码如下： 注意：用vue-resource插件注册一个资源路由，跟laravel里面的资源路由用法差不多，绑定到删除按钮传递一个task一条记录到deleteTask方法，执行resource.delete方法到后台,实际对应后台的删除路由，后台删除控制器代码如下： 13.在视图里点击删除按钮，会实现删除功能同时删除数据库纪录，但这里报错(不要方！！！因为没有Laravel没有获取token值），加如下两行代码即可： 1删除数据库的记录vuejs同时执行$remove删除tasks 里面的该条记录 14.接下来实现添加task，在template增加一个form 表单，在vue的component组件添加createTask方法，并且在input用v-model绑定数据notes，同时在data初始化一个notes： 1创建Task成功，但是需要优化效果，这里简单优化两个地方，一个是创建成功现实在最前面，另一个是清空input框数据。具体修改代码如下： 注意：这里的orderBy是vuejs的排序，－1代表倒序。 15.最后的效果，如下：编辑功能如添加功能，稍作修改即可。整个功能实现完成！初学VueJs使用的不是很好，欢迎指正！(转) 注：本文章转自公众号：chengxuyuanbiji，本文转载已取得授权。另转载请注明出处，一切权益归原作者所有。扫描以下二维码关注 chengxuyuanbiji 公众号，掌握最新Laravel及相关前端扩展技术知识。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[《深入浅出Node.js》笔记摘录（一）]]></title>
      <url>%2F2017%2F04%2F%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode.js%E3%80%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
      <content type="text"><![CDATA[模块的实现 区分为node自身提供的核心模块与用户编写的文件模块优先从缓存加载 路径分析 文件定位 编译执行文件拓展名分析require( )在分析标识符的过程中，会出现标识符中不包含文件拓展名的情况。node会按照.js、.json、.node的顺序补充拓展名，依次尝试。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[互联网红薯育苗种植记录]]></title>
      <url>%2F2017%2F04%2F%E4%BA%92%E8%81%94%E7%BD%91%E7%BA%A2%E8%96%AF%E7%A7%8D%E6%A4%8D%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[2017.09.24 丰收2017.09.10 收获果实(提前收集一部分)2017.07.24 初见果实2017.05.14 正苗种植（这个时间种算是较晚了）2017.04.22 育苗入土2017.01.10 优质红薯育苗开始 由来： 年前得到了一些市面买不到(主要是对方不售卖)的优质红薯，不是很多，本着今年吃完明年还想继续吃得上的精神，萌发了育苗扦插种植的想法。 11月10号(5℃±)选择部分红薯切面入水育苗 14月22号(25℃±)培育好的苗二次培育 因为无过往经验，网上技术教程也众说纷坛，所以为了保证至少存活下来一棵苗，主要分为以下五种实施方案： 方法一：母体培育及后期种植室温下自然生长的母体带苗入营养土培育。04.30更新：迁移至五加仑大盆种植。 方法二：母体上的幼苗营养土培育及后期种植室温下自然生长的母体培育出来的嫩苗单独入营养土培育。04.30更新：05.01更新：迁移至三加仑大盆种植。 方法三：母体上的幼苗沙土培育及后期种植入水育苗的母体所培育出来的嫩苗单独入沙土培育。 方法四：母体上的幼苗入水培育及后期种植入水育苗的母体所培育出来的嫩苗单独入水二次培育。04.30更新：此方式育苗不生长，已放弃。 方法五：母体水中培育及后期种植入水育苗的母体继续保持培育。05.01更新：迁址至五加仑大盆种植。 正苗种植挖出所有土壤中的母体，掰掉长出的新苗，这才是下一代的希望。含带母体入土只会一直在母体的基础上一支生根，是不会结果的，所以需要的是母体在土中。部分育出的苗之前水育的带根母体各类盆里也随便种了几株，这些不抱什么希望。在盆里随便撒了点🌻，😄 爬秧结果07.24更新：一株小苗根部已经结果了，今年有收成了。 初收果实09.10更新：再过三周就到中秋节该收获果实的时间了，今天找了一个小盆的红薯提前给收了，还是有些果实的。 就是这一浅盆，最早种植的时候是不抱希望的：相对而言这么小的盆子结出来这么多已经很满足了，还有很多小的还没长大，有些可惜了。晚上把它们吃掉试试口感怎么样😊，更期待大盆里能结出什么样的果实了。 丰收09.24更新：马上就是中秋节了，是时候收获果实了，提前一周收了，再晒一晒才发甜。收了两大桶和一个中桶内的红薯，普遍比较小，还是空间太小长不开。对比市面上的红薯就能看出来个头了。 最后从5月14日到9月24日，四个多月的时间也长了不少果实，但更多手指头那么大的没有空间生长，还是空间太小，从下边这张图就能看出来，根须已经爬遍了桶里的土壤。吸取经验，冬天接着育苗，来年继续种植。✌️✌️✌️]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JSON数据的那点事]]></title>
      <url>%2F2017%2F04%2Fjson%E6%95%B0%E6%8D%AE%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B%2F</url>
      <content type="text"><![CDATA[1.基础JSON有两种结构，对象和数组。 JSON对象结构是以“{”大括号开始，以“}”大括号结束。中间部分由n个以“，”分隔的“key(键)/value(值)”对构成，关键字和值之间以“：”分隔，一般语法结构如下方代码所示(其中key是字符串，而value可以是字符串，数值，true，false，null，对象或数组)： 12345&#123; name: xiao ming, age: 18, ...&#125; JSON数组结构是以“[”开始，“]”结束，中间由n个以“，”分隔的值列表组成，一般语法结构如下方代码所示： 12345678910[ &#123; name: xiao ming, age: 18 &#125;, &#123; name: xiao hong, age: 21 &#125;] 2.操作 分为两种方式：“.”和“[key]”。 其中JSON对象与JSON数组可互相转换，譬如有下边一组JSON数据需要格式化： 1234567891011121314151617181920&#123; &quot;10&quot;: &#123; &quot;id&quot;: 7, &quot;sorts&quot;: 0, &quot;level&quot;: 1, &quot;goods&quot;: [] &#125;, &quot;11&quot;: &#123; &quot;id&quot;: 8, &quot;sorts&quot;: 0, &quot;level&quot;: 1, &quot;goods&quot;: [] &#125;, &quot;12&quot;: &#123; &quot;id&quot;: 10, &quot;sorts&quot;: 0, &quot;level&quot;: 2, &quot;goods&quot;: [] &#125;&#125; 首先尝试遍历展示对应数据的时候json.parse()后直接获取JSON对象的length，返回的结果肯定是undefined了。 遍历后json[i]获取到i的值是对应当前数据的key值，而期望得到的是以0为下标开始的数据格式(类似于JSON数组的下标表示方式)。 网上的方法如下图for in的循环方式，处理结果只能得到数据的总长度，解决了最开始直接获取length输出undefined的问题，数据结构依然不是期望结果。 12345678910111213function getjson(json)&#123; var jsonLength = 0; for(var item in json)&#123; jsonLength++; &#125; return jsonLength;&#125; 最终，通过Object.keys与.map()方法组合将JSON对象转化为JSON数组。转化代码如下： 1234json = JSON.parse(json);json = Object.keys(json).map(function(k)&#123; return json[k];&#125;); 根据数据情况需先将字符串转化为对象 Object.keys(json)返回参数json可被遍历的属性 .map()返回json遍历后JSON数组。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F04%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome !]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[sublime text 头部自动化注释（DocBlockr）]]></title>
      <url>%2F2016%2F04%2Fsublime%20text%20%E5%A4%B4%E9%83%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B3%A8%E9%87%8A%EF%BC%88DocBlockr%EF%BC%89%2F</url>
      <content type="text"><![CDATA[通过sublime text下package control 的 Install Package安装DocBlockr插件。 打开Preferences -&gt; Package Settings -&gt; DocBlockr-&gt;Settings - User 配置文件,也可以直接将新修改的配置信息保存到”Default Settins”。(“Default Settins”是默认配置文件，需要管理员权限才能修改。一般情况下不推荐直接修改系统默认配置文件)。 将下面的代码根据需求保存到User配置文件中并保存文件，再次触发DocBlockr即可看到效果。 123456789101112131415161718&#123; &quot;jsdocs_param_name&quot;: false, &quot;jsdocs_param_description&quot;: false, &quot;jsdocs_return_description&quot;: [], &quot;jsdocs_return_tag&quot;: false, &quot;jsdocs_extra_tags_go_after&quot;: [], &quot;jsdocs_align_tags&quot;: [], &quot;jsdocs_extra_tags&quot;: [ &quot;&quot;, &quot;@DateTime &#123;&#123;datetime&#125;&#125;&quot;, &quot;&quot;, &quot;@author ***&quot;, &quot;&quot;, &quot;保持优雅的代码注释&quot;, &quot;maintain the elegant code comments&quot;, &quot;@version $&#123;1:[version]&#125;&quot;, ]&#125; 更多自定义配置可参考官方文档（https://github.com/spadgos/sublime-jsdocs）。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python3-3.5.1 already installed, it's just not linked]]></title>
      <url>%2F2016%2F04%2Fpython3-3.5.1%20already%20installed%2C%20it's%20just%20not%20linked%2F</url>
      <content type="text"><![CDATA[mac安装python3版本之后无法启动，运行下面一下代码即可： 1sudo ln -s /Library/Frameworks/Python.framework/Versions/3.4/bin/python3 /usr/local/bin/python3]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[wordpress权限及后台FTP登录失败问题解决方法]]></title>
      <url>%2F2016%2F02%2Fwordpress%E6%9D%83%E9%99%90%E5%8F%8A%E5%90%8E%E5%8F%B0FTP%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[在后台模板进行模板编辑无保存按钮，提示当前为只读权限。个人解决方法就是修改整个文件夹的权限，使当前用户及组拥有Write和eXecute权限。 在wordpress后台版本更新或者安装插件时提示输入FTP账户信息，出现这个问题的原因是Apache/Nginx的执行身份是非文件归属身份。解决方法为编辑wordpress项目根目录下的配置文件(wp-config.php),在最后一行加上以下一行代码: 123define(&quot;FS_METHOD&quot;, &quot;direct&quot;);define(&quot;FS_CHMOD_DIR&quot;, 0777);define(&quot;FS_CHMOD_FILE&quot;, 0777); 抑或是遇到所有权限问题最简单粗暴直接的方法就是给整个网站目录添加权限： 1sudo chmod -R 777 yourfolder/ 当然，严格意义上讲这样是不安全的。]]></content>
    </entry>

    
  
  
</search>
